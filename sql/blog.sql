/*
 Navicat Premium Data Transfer

 Source Server         : ghghgh
 Source Server Type    : MySQL
 Source Server Version : 80037
 Source Host           : localhost:3306
 Source Schema         : blog

 Target Server Type    : MySQL
 Target Server Version : 80037
 File Encoding         : 65001

 Date: 30/12/2024 19:09:15
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for article
-- ----------------------------
DROP TABLE IF EXISTS `article`;
CREATE TABLE `article`  (
  `AID` int(0) NOT NULL AUTO_INCREMENT,
  `UUID` int(0) NULL DEFAULT NULL,
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `title` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `tags` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `created_at` timestamp(0) NULL DEFAULT CURRENT_TIMESTAMP(0) ON UPDATE CURRENT_TIMESTAMP(0),
  `likes` int(0) NULL DEFAULT NULL,
  PRIMARY KEY (`AID`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 17 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of article
-- ----------------------------
INSERT INTO `article` VALUES (1, 1, '张三', '计算机网络1', '<h1 class=\"code-line\" data-line-start=0 data-line-end=1 ><a id=\"_0\"></a>计算机网络原理</h1>\r\n<h2 class=\"code-line\" data-line-start=1 data-line-end=2 ><a id=\"_1\"></a>概述</h2>\r\n<h3 class=\"code-line\" data-line-start=2 data-line-end=3 ><a id=\"12_2\"></a>1.2互联网概述</h3>\r\n<p class=\"has-line-data\" data-line-start=\"3\" data-line-end=\"4\">1.三大网络</p>\r\n<blockquote>\r\n<ol>\r\n<li class=\"has-line-data\" data-line-start=\"4\" data-line-end=\"5\">电信网</li>\r\n</ol>\r\n</blockquote>\r\n<ol start=\"2\">\r\n<li class=\"has-line-data\" data-line-start=\"5\" data-line-end=\"6\">有线电视网络</li>\r\n<li class=\"has-line-data\" data-line-start=\"6\" data-line-end=\"8\">计算机网络</li>\r\n</ol>\r\n<h3 class=\"code-line\" data-line-start=8 data-line-end=9 ><a id=\"13_8\"></a>1.3互联网组成</h3>\r\n<h4 class=\"code-line\" data-line-start=9 data-line-end=10 ><a id=\"131__9\"></a>1.3.1 互联网边缘部分</h4>\r\n<blockquote>\r\n<p class=\"has-line-data\" data-line-start=\"10\" data-line-end=\"11\">客机等接收部分</p>\r\n</blockquote>\r\n<h4 class=\"code-line\" data-line-start=12 data-line-end=13 ><a id=\"132__12\"></a>1.3.2 互联网核心部分</h4>\r\n<blockquote>\r\n<p class=\"has-line-data\" data-line-start=\"13\" data-line-end=\"14\">路由器，交换机等交换部分,其中路由器是实现分组交换的关键构件</p>\r\n</blockquote>\r\n<h5 class=\"code-line\" data-line-start=15 data-line-end=16 ><a id=\"1_15\"></a>1.电路交换的主要特点</h5>\r\n<p class=\"has-line-data\" data-line-start=\"16\" data-line-end=\"17\">通过专用的物理通路来进行交换链接,其过程通常为：</p>\r\n<blockquote>\r\n<p class=\"has-line-data\" data-line-start=\"17\" data-line-end=\"18\"><strong>建立连接（占用）→通话（持续占用）→释放链接（释放）</strong></p>\r\n</blockquote>\r\n<h5 class=\"code-line\" data-line-start=19 data-line-end=20 ><a id=\"2__19\"></a>2. 分组交换的主要特点</h5>\r\n<p class=\"has-line-data\" data-line-start=\"20\" data-line-end=\"23\">通过存储转发技术，把报文分组发送,在每组之前使用首部区分构成分组，称为**“包”**<br>\r\n其边缘部分<strong>主机是为用户进行信息处理的</strong><br>\r\n其核心部分<strong>路由器等是用来转发分组，即分组交换</strong></p>\r\n<h5 class=\"code-line\" data-line-start=25 data-line-end=26 ><a id=\"3__25\"></a>3. 网络协议</h5>\r\n<p class=\"has-line-data\" data-line-start=\"26\" data-line-end=\"28\">是为了在网络中进行数据交换而建立的规则，标准或约定<br>\r\n三个组成要素</p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"29\" data-line-end=\"30\">语法 : 数据与控制信息的结构或范式</li>\r\n<li class=\"has-line-data\" data-line-start=\"30\" data-line-end=\"31\">语意 : 需要发出何种控制信息，完成何种动作以及做出什么反应</li>\r\n<li class=\"has-line-data\" data-line-start=\"31\" data-line-end=\"33\">同步：事件实现顺序的详细说明</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"33\" data-line-end=\"39\">各层主要实现功能:<br>\r\n<strong>差错控制</strong>:使得各层次通信更可靠<br>\r\n<strong>流量控制</strong>:使得来得及接受<br>\r\n<strong>分段和重装</strong>：发送端将信息分割为小单位而接收端重装<br>\r\n<strong>复用和分用</strong>:发送端几个高层会话使用一条低端链接，在接收端分用<br>\r\n<strong>链接建立和释放</strong>：交换数据前先建立会话，数据交换结束后释放会话</p>\r\n<p class=\"has-line-data\" data-line-start=\"41\" data-line-end=\"42\">在对等层之间传输的单元叫：<strong>协议数据单元（PDU）</strong></p>\r\n<h3 class=\"code-line\" data-line-start=43 data-line-end=44 ><a id=\"21__43\"></a>2.1 物理层</h3>\r\n<p class=\"has-line-data\" data-line-start=\"44\" data-line-end=\"45\">确定于传输媒体的借口的一些特性 4个特性:</p>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"45\" data-line-end=\"46\">机械特性：指明其中所用的接线器的形状与尺寸，引线数目和排列，固定锁定装置等</li>\r\n<li class=\"has-line-data\" data-line-start=\"46\" data-line-end=\"47\">电气特性: 借口电缆的各线上出现的电压的范围</li>\r\n<li class=\"has-line-data\" data-line-start=\"47\" data-line-end=\"48\">功能特性：某条线上出现的某一电平的电压的含义</li>\r\n<li class=\"has-line-data\" data-line-start=\"48\" data-line-end=\"50\">过程特性：对于不同功能的各种事件的出现概率</li>\r\n</ul>', '计算机网络', '2024-12-30 17:35:12', 23);
INSERT INTO `article` VALUES (2, 2, '李四', '计算机网络2', '<p class=\"has-line-data\" data-line-start=\"50\" data-line-end=\"51\">数据通信系统存在三大部分: <strong>源系统</strong> <strong>传输系统</strong> <strong>目的系统</strong></p>\r\n<h3 class=\"code-line\" data-line-start=52 data-line-end=53 ><a id=\"_52\"></a>常用术语</h3>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"53\" data-line-end=\"55\">\r\n<p class=\"has-line-data\" data-line-start=\"53\" data-line-end=\"54\">信号：数据的电气或者电磁的表现</p>\r\n</li>\r\n<li class=\"has-line-data\" data-line-start=\"55\" data-line-end=\"58\">\r\n<p class=\"has-line-data\" data-line-start=\"55\" data-line-end=\"56\">码元：在使用时间域的波形表示数字信号时，不同离散数值的基本波形</p>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"56\" data-line-end=\"58\">使用二进制编码时，只有两种不同的码元</li>\r\n</ul>\r\n</li>\r\n<li class=\"has-line-data\" data-line-start=\"58\" data-line-end=\"63\">\r\n<p class=\"has-line-data\" data-line-start=\"58\" data-line-end=\"59\">信道：一般用来表示向某一方面传输信息的媒体</p>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"59\" data-line-end=\"60\">单向通信：<strong>只能有一个方向</strong>的信通信，没有反方向的交互</li>\r\n<li class=\"has-line-data\" data-line-start=\"60\" data-line-end=\"61\">双向交替通信：通信双方都可以发送，但是双方<strong>不能同时</strong>发送</li>\r\n<li class=\"has-line-data\" data-line-start=\"61\" data-line-end=\"63\">双向同时通信：通信的双方都可以<strong>同时发送和接受</strong>信息</li>\r\n</ul>\r\n</li>\r\n<li class=\"has-line-data\" data-line-start=\"63\" data-line-end=\"66\">\r\n<p class=\"has-line-data\" data-line-start=\"63\" data-line-end=\"64\">基带信号（基本频带信号）</p>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"64\" data-line-end=\"65\">来自信源的信号</li>\r\n<li class=\"has-line-data\" data-line-start=\"65\" data-line-end=\"66\">包含较多低频成分，甚至直流</li>\r\n</ul>\r\n</li>\r\n<li class=\"has-line-data\" data-line-start=\"66\" data-line-end=\"68\">\r\n<p class=\"has-line-data\" data-line-start=\"66\" data-line-end=\"67\">调制</p>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"67\" data-line-end=\"68\">基带调制：仅仅对基带信号波形调制</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<h3 class=\"code-line\" data-line-start=70 data-line-end=71 ><a id=\"_70\"></a>信道能够通过的频率范围：</h3>\r\n<p class=\"has-line-data\" data-line-start=\"71\" data-line-end=\"74\">奈氏准则: 码元传输<strong>最高</strong>速率＝2W（码元/秒）<br>\r\n信道的<strong>极限</strong>信息传输速率C可表达为：<br>\r\n香农公式  C＝Wlog2（1+S/N）(bit/s)</p>\r\n<pre><code>C是数据速率的极限值，单位bit/s；\r\nW为信道带宽，单位Hz；\r\nS是信号功率（瓦），\r\nN是噪声功率（瓦）。\r\n香农公式中的S/N是为信号与噪声的功率之比\r\n</code></pre>\r\n<h3 class=\"code-line\" data-line-start=81 data-line-end=82 ><a id=\"_81\"></a>静态复用</h3>\r\n<p class=\"has-line-data\" data-line-start=\"82\" data-line-end=\"85\"><strong>波分复用WDM</strong><br>\r\n光的频分复用： 使用一根光缆<strong>同时传输</strong>多个光载波信号。<br>\r\n<strong>码分复用</strong></p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"86\" data-line-end=\"87\">每一个用户可以在同样的时间使用同样的频带进行通信。</li>\r\n<li class=\"has-line-data\" data-line-start=\"87\" data-line-end=\"88\">各用户使用经过特珠挑选的不同码型，因此不会造成干···扰。</li>\r\n<li class=\"has-line-data\" data-line-start=\"88\" data-line-end=\"93\">当码分复用 CDM （Code Division Multiplexing） 信道为多个不同地址的用户所共享时，就称为码分多址 CDMA （Code Division Multiple Access).<br>\r\n<img src=\"https://p.sda1.dev/19/8efbd5135c69469a5ba84002beb5595a/1000072475.jpg\" alt=\"1000072475.jpg\"><br>\r\n<img src=\"https://p.sda1.dev/19/53b2f4e839419e8c411da0987c65f5cb/1000072476.jpg\" alt=\"1000072476.jpg\"><br>\r\n<strong>右下角：S码片和其他用户的码片内积为0</strong></li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"93\" data-line-end=\"100\"><strong>例题：</strong><br>\r\n共有四个站进行码分多址CDMA通信。四个站的码片序列为；<br>\r\nA:(-1 -1 -1 +1 +1 -1 +1 +1)<br>\r\nB:(-1 -1 +1 -1 +1 +1 +1 -1)<br>\r\nC:(-1 +1 -1 +1 +1 +1 -1 -1)<br>\r\nD:(-1 +1 -1 -1 -1 -1 +1 -1)<br>\r\n现收到这样的码片序列：（-1+1-3+1-1-3+1+1)。问哪个站发送1或者0数据了？</p>\r\n<p class=\"has-line-data\" data-line-start=\"101\" data-line-end=\"104\">解：  （对应收的码片序列*对应站的码片序列）累加/码片数量<br>\r\n<img src=\"https://cdn.mathpix.com/snip/images/hwxtfqFd6YL7o_wtKpaPJdzwsPWg_9HGwI1cFec98Y0.original.fullsize.png\" alt=\"\"><br>\r\n<strong>根据结果有三种</strong></p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"105\" data-line-end=\"106\">结果为 1 发送了1</li>\r\n<li class=\"has-line-data\" data-line-start=\"106\" data-line-end=\"107\">结果为 －1 发送了0</li>\r\n<li class=\"has-line-data\" data-line-start=\"107\" data-line-end=\"109\">结果为 0 未发送</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"109\" data-line-end=\"110\"><strong>ADSL 调制解调器</strong></p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"111\" data-line-end=\"112\">采用离散多音调DMT (Discrete Multi-Tone)调制技术。</li>\r\n<li class=\"has-line-data\" data-line-start=\"112\" data-line-end=\"113\">DMT调制技术采用频分复用FDM方法。</li>\r\n<li class=\"has-line-data\" data-line-start=\"113\" data-line-end=\"114\">相当于在-对用户线上使用许多小的调制解调器并行地传送数据。</li>\r\n<li class=\"has-line-data\" data-line-start=\"114\" data-line-end=\"115\">ADSL不能保证固定的数据率。</li>\r\n</ul>', '计算机网络', '2024-12-30 17:35:13', 1);
INSERT INTO `article` VALUES (8, 1, 'admin', '计算机网络3', '<h3 class=\"code-line\" data-line-start=117 data-line-end=118 ><a id=\"_117\"></a>数据链路层(帧)</h3>\r\n<p class=\"has-line-data\" data-line-start=\"118\" data-line-end=\"119\"><strong>点对点信道（P2P）：</strong></p>\r\n<blockquote>\r\n<p class=\"has-line-data\" data-line-start=\"119\" data-line-end=\"120\">使用一对一的<strong>点对点</strong>通信</p>\r\n</blockquote>\r\n<p class=\"has-line-data\" data-line-start=\"121\" data-line-end=\"122\"><strong>广播信道（PPPoE）</strong></p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"123\" data-line-end=\"124\">使用一对多的<strong>广播通信</strong>方式</li>\r\n<li class=\"has-line-data\" data-line-start=\"124\" data-line-end=\"126\">必须使用专用的<strong>共享通信协议</strong>俩协调主机的数据发送</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"126\" data-line-end=\"127\"><strong>链路</strong></p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"128\" data-line-end=\"132\">链路 （link）：\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"129\" data-line-end=\"130\">一条无源的点到点的物理线路段，中间没有任何其他的交换结点。</li>\r\n<li class=\"has-line-data\" data-line-start=\"130\" data-line-end=\"131\">一条链路只是一条通路的一个组成部分。</li>\r\n<li class=\"has-line-data\" data-line-start=\"131\" data-line-end=\"132\">或物理链路。</li>\r\n</ul>\r\n</li>\r\n<li class=\"has-line-data\" data-line-start=\"132\" data-line-end=\"137\">数据链路 （data link）：\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"133\" data-line-end=\"134\">把实现控制数据传输的协议的硬件和软件加到链路上，就构成了数据链路。</li>\r\n<li class=\"has-line-data\" data-line-start=\"134\" data-line-end=\"135\">或逻辑链路。</li>\r\n<li class=\"has-line-data\" data-line-start=\"135\" data-line-end=\"137\">典型实现：适配器（即网卡）</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"137\" data-line-end=\"138\"><img src=\"https://p.sda1.dev/19/d512cc44b9461fc171a08f16197bb758/1000078548.jpg\" alt=\"1000078548.jpg\"></p>\r\n<p class=\"has-line-data\" data-line-start=\"139\" data-line-end=\"140\"><strong>三个基本问题：</strong></p>\r\n<ol>\r\n<li class=\"has-line-data\" data-line-start=\"140\" data-line-end=\"141\">\r\n<p class=\"has-line-data\" data-line-start=\"140\" data-line-end=\"141\">封装成帧</p>\r\n</li>\r\n<li class=\"has-line-data\" data-line-start=\"141\" data-line-end=\"144\">\r\n<p class=\"has-line-data\" data-line-start=\"141\" data-line-end=\"143\">透明传输<br>\r\n如果某字节正好是SOH或者EOT，那么数据链路层就会错误的找到帧的边界</p>\r\n</li>\r\n<li class=\"has-line-data\" data-line-start=\"144\" data-line-end=\"148\">\r\n<p class=\"has-line-data\" data-line-start=\"144\" data-line-end=\"147\">差错控制<br>\r\n循环冗余检验<br>\r\n<img src=\"https://p.sda1.dev/19/8e3a95c4dbcd453865f1bfafaa355f62/1000078551.jpg\" alt=\"1000078551.jpg\"></p>\r\n</li>\r\n</ol>\r\n<p class=\"has-line-data\" data-line-start=\"148\" data-line-end=\"149\"><strong>注意</strong></p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"150\" data-line-end=\"151\">仅用循环冗余检验CRC 差错检测技术只能做到<strong>无差错接受</strong>(accept)。</li>\r\n<li class=\"has-line-data\" data-line-start=\"151\" data-line-end=\"152\">即：“<strong>凡是接受的帧（即不包括丢弃的帧），我们都能以非常接近于1的概率认为这些帧在传输过程中没有产生差错”</strong>。</li>\r\n<li class=\"has-line-data\" data-line-start=\"152\" data-line-end=\"154\">即：“凡是接收端数据链路层接受的帧均无差错”。</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"154\" data-line-end=\"155\"><strong>注意</strong> 无比特差错≠无传输差错</p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"156\" data-line-end=\"157\"><strong>可靠传输</strong>：数据链路层的发送端发送什么，在接收端就收到什么。</li>\r\n<li class=\"has-line-data\" data-line-start=\"157\" data-line-end=\"160\"><strong>传输差错</strong>可分为两大类:\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"158\" data-line-end=\"159\">比特出错</li>\r\n<li class=\"has-line-data\" data-line-start=\"159\" data-line-end=\"160\">传输差错：帧丢失，帧重复，帧失序（因为速率不同接收方无法正确判断帧顺序导致接受出错）等</li>\r\n</ul>\r\n</li>\r\n<li class=\"has-line-data\" data-line-start=\"160\" data-line-end=\"161\">在数据链路层使用CRC检验，能够实现<strong>无比特差错的传输</strong>，但这还<strong>不是可靠传输</strong>。</li>\r\n<li class=\"has-line-data\" data-line-start=\"161\" data-line-end=\"163\">要做到可靠传输，还必须再加上帧编号、确认和重传等机制。</li>\r\n</ul>', '计算机网络', '2024-12-30 17:35:13', 0);
INSERT INTO `article` VALUES (10, 1, 'admin', '计算机网络4', '<h3 class=\"code-line\" data-line-start=163 data-line-end=164 ><a id=\"_163\"></a>点对点协议</h3>\r\n<p class=\"has-line-data\" data-line-start=\"164\" data-line-end=\"165\">PPP协议：</p>\r\n<ol>\r\n<li class=\"has-line-data\" data-line-start=\"165\" data-line-end=\"166\">简单</li>\r\n<li class=\"has-line-data\" data-line-start=\"166\" data-line-end=\"167\">封装成帧</li>\r\n<li class=\"has-line-data\" data-line-start=\"167\" data-line-end=\"168\">透明性</li>\r\n<li class=\"has-line-data\" data-line-start=\"168\" data-line-end=\"169\">多种网络层协议</li>\r\n<li class=\"has-line-data\" data-line-start=\"169\" data-line-end=\"170\">多重链路类型</li>\r\n<li class=\"has-line-data\" data-line-start=\"170\" data-line-end=\"171\">差错检测</li>\r\n<li class=\"has-line-data\" data-line-start=\"171\" data-line-end=\"172\">检测链接状态</li>\r\n<li class=\"has-line-data\" data-line-start=\"172\" data-line-end=\"173\">最大传输单元</li>\r\n<li class=\"has-line-data\" data-line-start=\"173\" data-line-end=\"174\">网络层地址协商</li>\r\n<li class=\"has-line-data\" data-line-start=\"174\" data-line-end=\"176\">数据压缩协商</li>\r\n</ol>\r\n<p class=\"has-line-data\" data-line-start=\"176\" data-line-end=\"177\">PPP协议的组成：</p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"178\" data-line-end=\"182\">三个组成部分：\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"179\" data-line-end=\"180\">一个将IP数据报<strong>封装</strong>到串行链路的方法。</li>\r\n<li class=\"has-line-data\" data-line-start=\"180\" data-line-end=\"181\">一个<strong>链路控制协议 LCP</strong>(Link Control Protocol)。</li>\r\n<li class=\"has-line-data\" data-line-start=\"181\" data-line-end=\"182\">一套<strong>网络控制协议 NCP</strong>(Network Control Protocol)。</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"184\" data-line-end=\"185\"><img src=\"https://p.sda1.dev/19/ba59aa66938890e9fe900d6dc9ee521d/IMG_2446.jpeg\" alt=\"IMG_2446.jpeg\"></p>\r\n<p class=\"has-line-data\" data-line-start=\"188\" data-line-end=\"190\"><img src=\"https://p.sda1.dev/19/9faaa1bb875e2e5672c0308eec6f8b0d/1000078557.jpg\" alt=\"1000078557.jpg\"><br>\r\n<strong>23是03和0x进行异或得到的</strong></p>\r\n<p class=\"has-line-data\" data-line-start=\"191\" data-line-end=\"195\"><strong>字节填充转换规则：</strong><br>\r\n7E －&gt; 7D5E<br>\r\n7D －&gt; 7D 5D<br>\r\n小于20的数字前加7D（<strong>特殊：03-&gt;7D23</strong>）</p>\r\n<p class=\"has-line-data\" data-line-start=\"196\" data-line-end=\"198\"><strong>零比特填充转换</strong>:<br>\r\n连续五个1接一个0则表示这里进行了填充</p>\r\n<h3 class=\"code-line\" data-line-start=199 data-line-end=200 ><a id=\"_199\"></a>动态媒体接入控制</h3>\r\n<ol>\r\n<li class=\"has-line-data\" data-line-start=\"200\" data-line-end=\"201\">随机接入 多个用户可以随机进行接入</li>\r\n<li class=\"has-line-data\" data-line-start=\"201\" data-line-end=\"203\"></li>\r\n</ol>\r\n<p class=\"has-line-data\" data-line-start=\"203\" data-line-end=\"204\">适配器作用</p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"205\" data-line-end=\"211\">重要功能:\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"206\" data-line-end=\"207\">进行串行/并行转换。</li>\r\n<li class=\"has-line-data\" data-line-start=\"207\" data-line-end=\"208\">对数据进行缓存。</li>\r\n<li class=\"has-line-data\" data-line-start=\"208\" data-line-end=\"209\">在计算机的操作系统安装设备驱动程序。</li>\r\n<li class=\"has-line-data\" data-line-start=\"209\" data-line-end=\"211\">实现以太网协议。</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"211\" data-line-end=\"212\">CSMA/CD协议(<strong>先听后说，边说边听</strong>)：</p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"213\" data-line-end=\"215\"><strong>多点接入</strong>：说明这是总线型网络。许多计算机以多点接入的方式连<br>\r\n接在一根总线上。</li>\r\n<li class=\"has-line-data\" data-line-start=\"215\" data-line-end=\"217\"><strong>载波监听</strong>：即“边发送边监听”。不管在想要发送数据之前，还是<br>\r\n在发送数据之中，每个站都必须不停地检测信道。</li>\r\n<li class=\"has-line-data\" data-line-start=\"217\" data-line-end=\"219\"><strong>碰撞检测</strong>：适配器边发送数据，边检测信道上的信号电压的变化情况。电压摆动值超过一定的门限值时，就认为总线上至少有两个站同时在发送数据，表明产生了碰撞（或冲突）。</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"219\" data-line-end=\"220\"><strong>如果检测到冲突：</strong></p>\r\n<ol>\r\n<li class=\"has-line-data\" data-line-start=\"220\" data-line-end=\"221\">适配器立即停止发送</li>\r\n<li class=\"has-line-data\" data-line-start=\"221\" data-line-end=\"223\">等待一段随机时间后再发送</li>\r\n</ol>\r\n<p class=\"has-line-data\" data-line-start=\"223\" data-line-end=\"225\"><strong>全流程：</strong><br>\r\n<img src=\"https://p.sda1.dev/19/554416befc652714f82278c8688f94be/1000078586.jpg\" alt=\"1000078586.jpg\"></p>\r\n<p class=\"has-line-data\" data-line-start=\"226\" data-line-end=\"227\"><strong>10 Mbit/s以太网争先期的长度</strong></p>\r\n<blockquote></blockquote>\r\n<p class=\"has-line-data\" data-line-start=\"228\" data-line-end=\"232\"><strong>争用期的长度=51.2 μs。</strong><br>\r\n(<strong>为了能够检测到最远是否发生冲突</strong>)<br>\r\n对于10 Mbit/s以太网，在争用期内可发送512bit，即64字节。<br>\r\n这意味着</p>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"232\" data-line-end=\"233\">\r\n<p class=\"has-line-data\" data-line-start=\"232\" data-line-end=\"233\">以太网在发送数据时，若前64字节没有发生冲突，则后续的数据就平身发生冲突。</p>\r\n</li>\r\n<li class=\"has-line-data\" data-line-start=\"233\" data-line-end=\"237\">\r\n<p class=\"has-line-data\" data-line-start=\"233\" data-line-end=\"234\">以太网规定了为64字节,凡长度小于64字节的帧都是由于冲突而异常中止的无效帧，应当立即将其丢弃</p>\r\n<p class=\"has-line-data\" data-line-start=\"235\" data-line-end=\"236\"><img src=\"https://p.sda1.dev/19/79631352d503e540c793e22fe6b53687/1000080111.jpg\" alt=\"1000080111.jpg\"></p>\r\n</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"237\" data-line-end=\"239\"><strong>在数据链路层扩展以太网</strong><br>\r\n<strong>早期</strong>：通过网桥进行拓展，使用<strong>软件转发</strong></p>\r\n<p class=\"has-line-data\" data-line-start=\"240\" data-line-end=\"244\">现在更多使用以太网<strong>交换机</strong><br>\r\n具有并行性，能同时连接多个端口，能以<strong>全双工(收发并行)<strong>的方式工作<br>\r\n接口</strong>有存储器</strong>，<strong>即插即用</strong>，其内部交换表是通过<strong>自学习法</strong>自动建立的<br>\r\n使用专用的交换结构芯片，用<strong>硬件转发</strong></p>\r\n<p class=\"has-line-data\" data-line-start=\"245\" data-line-end=\"246\">有两种转发方式：</p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"247\" data-line-end=\"249\">存储转发方式<br>\r\n把整个帧装起来再处理</li>\r\n<li class=\"has-line-data\" data-line-start=\"249\" data-line-end=\"253\">直通方式<br>\r\n接收帧的同时立刻按照数据帧的目的mac地址转发接口<br>\r\n缺点：但是会因为没检查可能会出错无法发现</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"253\" data-line-end=\"256\"><strong>以太网的自学习功能</strong><br>\r\n<strong>即谁说话把谁记录在表</strong><br>\r\n<img src=\"https://p.sda1.dev/19/8bc2c3e1f766317f4e3a1ee7595d1851/1000080315.jpg\" alt=\"1000080315.jpg\"></p>\r\n<p class=\"has-line-data\" data-line-start=\"258\" data-line-end=\"261\">但是如果两个交换机中可能会产生了回路，那么就会产生帧不断在两个交换机中<strong>兜圈子</strong>的现象<br>\r\n那么可以使用<br>\r\n<img src=\"https://p.sda1.dev/19/483d2bc5728ebc7f8b7510fb24b30879/1000080316.jpg\" alt=\"1000080316.jpg\"></p>\r\n<p class=\"has-line-data\" data-line-start=\"262\" data-line-end=\"264\">但是仍然可能会存在着例如广播风暴等问题<br>\r\n那么此刻就需要尽量缩小广播域，</p>\r\n<ol>\r\n<li class=\"has-line-data\" data-line-start=\"264\" data-line-end=\"265\">交换机路由器可以隔绝广播域</li>\r\n<li class=\"has-line-data\" data-line-start=\"265\" data-line-end=\"266\">可以通过虚拟局域网划分</li>\r\n</ol>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"267\" data-line-end=\"268\">基于交换机端口</li>\r\n<li class=\"has-line-data\" data-line-start=\"268\" data-line-end=\"269\">划分虚拟局域网的方法</li>\r\n<li class=\"has-line-data\" data-line-start=\"269\" data-line-end=\"270\">基于计算机网卡的MAC地址</li>\r\n<li class=\"has-line-data\" data-line-start=\"270\" data-line-end=\"271\">基于协议类型</li>\r\n<li class=\"has-line-data\" data-line-start=\"271\" data-line-end=\"272\">基于 IP子网地址</li>\r\n<li class=\"has-line-data\" data-line-start=\"272\" data-line-end=\"274\">基于高层应用或服务</li>\r\n</ul>\r\n<h2 class=\"code-line\" data-line-start=274 data-line-end=275 ><a id=\"_274\"></a>网络层</h2>\r\n<h3 class=\"code-line\" data-line-start=275 data-line-end=276 ><a id=\"_275\"></a>网络层的两个层面</h3>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"277\" data-line-end=\"278\">不同网络中的两个主机之间的通信，要经过若千个路由器转发分组来完成。</li>\r\n<li class=\"has-line-data\" data-line-start=\"278\" data-line-end=\"282\">在路由器之间传送的信息有以下2大类：\r\n<ol>\r\n<li class=\"has-line-data\" data-line-start=\"279\" data-line-end=\"280\">数据。</li>\r\n<li class=\"has-line-data\" data-line-start=\"280\" data-line-end=\"282\">路由信息（为数据传送进行服务）。<br>\r\n<img src=\"https://p.sda1.dev/19/c03c4829379598eee5733a4372a9d7a3/1000085565.jpg\" alt=\"1000085565.jpg\"></li>\r\n</ol>\r\n</li>\r\n</ul>\r\n<blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"285\" data-line-end=\"286\">数据层面</li>\r\n</ul>\r\n</blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"286\" data-line-end=\"287\">路由器根据本路由器生成的转发表，把收到的分组从查找到的对应接口转发出去。</li>\r\n<li class=\"has-line-data\" data-line-start=\"287\" data-line-end=\"288\">独立工作。</li>\r\n<li class=\"has-line-data\" data-line-start=\"288\" data-line-end=\"290\">采用硬件进行转发，快。</li>\r\n</ul>\r\n<blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"290\" data-line-end=\"291\">控制层面</li>\r\n</ul>\r\n</blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"291\" data-line-end=\"292\">根据路由选择协议所用的路由算法计算路由，创建出本路由器的路由表。</li>\r\n<li class=\"has-line-data\" data-line-start=\"292\" data-line-end=\"293\">许多路由器协同动作。</li>\r\n<li class=\"has-line-data\" data-line-start=\"293\" data-line-end=\"295\">采用软件计算，慢。</li>\r\n</ul>', '计算机网络', '2024-12-30 17:35:14', 0);
INSERT INTO `article` VALUES (11, 1, 'admin', '计算机网络5', '<h3 class=\"code-line\" data-line-start=295 data-line-end=296 ><a id=\"IP_295\"></a>IP协议</h3>\r\n<p class=\"has-line-data\" data-line-start=\"296\" data-line-end=\"298\">ipv4：32位<br>\r\n三个协议：</p>\r\n<ol>\r\n<li class=\"has-line-data\" data-line-start=\"298\" data-line-end=\"299\">地址解析协议ARP</li>\r\n<li class=\"has-line-data\" data-line-start=\"299\" data-line-end=\"300\">网际控制报文协议ICMP</li>\r\n<li class=\"has-line-data\" data-line-start=\"300\" data-line-end=\"303\">网际组管理协议IGMP<br>\r\n<img src=\"https://p.sda1.dev/19/f5ed67805d0d6aef91d4060bb04616e3/1000086055.jpg\" alt=\"1000086055.jpg\"><br>\r\n<strong>各类地址</strong></li>\r\n</ol>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"304\" data-line-end=\"305\">A类地址：网络号字段net-id位1字节  host-id为3字节</li>\r\n<li class=\"has-line-data\" data-line-start=\"305\" data-line-end=\"306\">B类地址：网络号字段net-id为2字节  host-id为2字节</li>\r\n<li class=\"has-line-data\" data-line-start=\"306\" data-line-end=\"307\">C类地址：网络号字段net-id为3字节  host-id为1字节</li>\r\n<li class=\"has-line-data\" data-line-start=\"307\" data-line-end=\"308\">D类地址：多播地址</li>\r\n<li class=\"has-line-data\" data-line-start=\"308\" data-line-end=\"310\">E类地址：留作后用</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"310\" data-line-end=\"311\"><img src=\"https://p.sda1.dev/19/271244bf4893070731793129abab289c/1000086056.jpg\" alt=\"1000086056.jpg\"></p>\r\n<p class=\"has-line-data\" data-line-start=\"312\" data-line-end=\"313\">缺点：设计上不合理，浪费地址资源，即使分割子网也无法解决IP枯竭问题</p>\r\n<p class=\"has-line-data\" data-line-start=\"314\" data-line-end=\"318\"><strong>无分类编址CIDR</strong><br>\r\nCIDR：无分类域间路由选择<br>\r\n消除了ABC类地址以及划分子网的概念，有效分配了IPv4的地址空间，但是无法解决IP枯竭<br>\r\n要点：</p>\r\n<ol>\r\n<li class=\"has-line-data\" data-line-start=\"318\" data-line-end=\"319\">地址前缀</li>\r\n<li class=\"has-line-data\" data-line-start=\"319\" data-line-end=\"320\">地址块</li>\r\n<li class=\"has-line-data\" data-line-start=\"320\" data-line-end=\"322\">地址掩码</li>\r\n</ol>\r\n<p class=\"has-line-data\" data-line-start=\"322\" data-line-end=\"325\"><strong>网络前缀</strong><br>\r\n2级结构，两个字段：网络前缀和主机号<br>\r\n通过斜线记法，即在IP地址最后通过**/n**其中n为表示前n位为网络前缀表示</p>\r\n<p class=\"has-line-data\" data-line-start=\"326\" data-line-end=\"329\"><strong>地址块</strong><br>\r\n把<strong>网络前缀都相同的连续的</strong>IP地址组成一个CIDR地址块<br>\r\n地址块的IP地址数目取决于网络前缀的位数</p>\r\n<p class=\"has-line-data\" data-line-start=\"330\" data-line-end=\"336\"><strong>地址掩码(子网掩码)</strong><br>\r\n位数：32位<br>\r\n目的：让机器快速从IP地址算出网络地址<br>\r\n由一连串的1和紧接着的一连串的0组成，而1的个数位网络前缀的长度<br>\r\n计算是通过子网掩码和IP地址进行AND运算(1 AND 1＝1，1 AND 0＝0，0 AND 0＝0)<br>\r\n即前n位AND运算，后面全部为0</p>\r\n<p class=\"has-line-data\" data-line-start=\"337\" data-line-end=\"342\">三个特殊的CIDR地址块<br>\r\n网络前缀长度 / 点分十进制 / 说明<br>\r\n/32  255.255.255.255  就是一个IP地址，这个特殊地址用于主机路由。<br>\r\n/31  255.255.255.254  只有两个IP地址，其主机号分别为0和11.这个地址块用于点对点链路<br>\r\n/0  0.0.0.0  同时IP地址也是全0，即0.0.0.0/0.用于默认路由。</p>\r\n<h3 class=\"code-line\" data-line-start=343 data-line-end=344 ><a id=\"_343\"></a>路由聚合</h3>\r\n<p class=\"has-line-data\" data-line-start=\"344\" data-line-end=\"346\">例子：<br>\r\n<img src=\"https://p.sda1.dev/19/727c73256c2616628a50489817e3a86f/1000087057.jpg\" alt=\"1000087057.jpg\"></p>\r\n<p class=\"has-line-data\" data-line-start=\"347\" data-line-end=\"349\">CIDR地址块划分举例<br>\r\n<img src=\"https://p.sda1.dev/19/ffd35ca656e590f39ff1f9f1ef76ae5c/1000087060.jpg\" alt=\"1000087060.jpg\"></p>', '计算机网络', '2024-12-30 17:35:14', 0);
INSERT INTO `article` VALUES (12, 12, '很好的', '计算机网络6', '<h3 class=\"code-line\" data-line-start=350 data-line-end=351 ><a id=\"IP_350\"></a>IP地址的特点</h3>\r\n<p class=\"has-line-data\" data-line-start=\"351\" data-line-end=\"353\">( 1 ) 每个IP地址都由网络前缀和主机号组成<br>\r\n( 2 ) IP地址是标志一台主机(或路由器)和一条链路的接口</p>\r\n<blockquote></blockquote>\r\n<p class=\"has-line-data\" data-line-start=\"354\" data-line-end=\"356\">－ 一台主机连接到两个网络上时，该主机必须有<strong>两个相应的IP地址</strong>，其<strong>网络号必须是不同的</strong>.这种主机成为<strong>多归属主机</strong><br>\r\n－ 一个<strong>路由器</strong>至少应当连接两个网络，因此一个路由器至少应当有<strong>两个不同</strong>的IP地址</p>\r\n<p class=\"has-line-data\" data-line-start=\"357\" data-line-end=\"358\">( 3 ) 转发器或交换机连接起来的若干个局域网仍为一个网络</p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"359\" data-line-end=\"360\">按照互联网的观点，一个网络是指<strong>具有相同网络前缀</strong>的主机的集合</li>\r\n<li class=\"has-line-data\" data-line-start=\"360\" data-line-end=\"361\">转发器或交换机连接起来的若干个局域网都有相同的网络号，他们仍为一个网络</li>\r\n<li class=\"has-line-data\" data-line-start=\"361\" data-line-end=\"362\"><strong>具有不同网络号的局域网必须使用路由器进行互联</strong></li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"364\" data-line-end=\"365\">( 4 ) 在IP地址中，所有分配到网络前缀的地址都是平等的</p>\r\n<p class=\"has-line-data\" data-line-start=\"366\" data-line-end=\"367\"><strong>IP地址</strong></p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"368\" data-line-end=\"369\">虚拟地址，软件地址，逻辑地址</li>\r\n<li class=\"has-line-data\" data-line-start=\"369\" data-line-end=\"370\">网络层和以上使用</li>\r\n<li class=\"has-line-data\" data-line-start=\"370\" data-line-end=\"372\">放在IP数据包首部</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"372\" data-line-end=\"373\"><strong>MAC地址</strong></p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"374\" data-line-end=\"375\">固化在网卡上的ROM中</li>\r\n<li class=\"has-line-data\" data-line-start=\"375\" data-line-end=\"376\">硬件地址，物理地址</li>\r\n<li class=\"has-line-data\" data-line-start=\"376\" data-line-end=\"377\">数据链路层使用</li>\r\n<li class=\"has-line-data\" data-line-start=\"377\" data-line-end=\"379\">放在MAC帧首部</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"379\" data-line-end=\"380\">中间多看ppt</p>\r\n<p class=\"has-line-data\" data-line-start=\"381\" data-line-end=\"384\"><strong>为什么要同时用IP地址和MAC地址</strong><br>\r\nMAC地址的使用转换难以统一，并且全世界范围内寻址也极为困难<br>\r\nIP编址解决了这个问题</p>\r\n<blockquote></blockquote>\r\n<p class=\"has-line-data\" data-line-start=\"385\" data-line-end=\"386\">连接到互联网的主机只需各自拥有一个唯一的IP 地址，它们之间的通信就像连接在同一个网络上那样简单方便，即使必须多次调用ARP来找到MAC地址，但这个过程都是由计算机软件自动进行的，对用户来说是看不见的。</p>\r\n<p class=\"has-line-data\" data-line-start=\"387\" data-line-end=\"388\"><img src=\"https://p.sda1.dev/19/51040a5205538aced8b861cd528c40b4/1000087108.jpg\" alt=\"1000087108.jpg\"></p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"390\" data-line-end=\"391\">首部的前一部分是<strong>固定20字节长度</strong>，所有数据包具有的</li>\r\n<li class=\"has-line-data\" data-line-start=\"391\" data-line-end=\"392\">可选字段长度<strong>可变</strong>（最大40字节）</li>\r\n<li class=\"has-line-data\" data-line-start=\"392\" data-line-end=\"393\"><strong>版本</strong>站四位，指的IP协议版本，例如4就是IPv4</li>\r\n<li class=\"has-line-data\" data-line-start=\"393\" data-line-end=\"394\"><strong>首部长度</strong>，占4字节，表示最大数值为15单位（1单位4字节），因此首部长度最大为60字节</li>\r\n<li class=\"has-line-data\" data-line-start=\"394\" data-line-end=\"395\">**区分服务（一般不用）**用来获取更好的服务，只有使用时才起作用</li>\r\n<li class=\"has-line-data\" data-line-start=\"395\" data-line-end=\"396\"><strong>总长度</strong>，占16位，指首部和数据只和的长度，**单位为字节，因此最大长度为65535字节，同时其长度不能超过最大传送单元MTU</li>\r\n<li class=\"has-line-data\" data-line-start=\"396\" data-line-end=\"397\"><strong>标识</strong>（identification），占16位，用来产生IP数据报的表示</li>\r\n<li class=\"has-line-data\" data-line-start=\"397\" data-line-end=\"398\"><strong>标志</strong>（flag），占3位，目前只有前两位有意义，最低位是MF，当MF＝1表示后面还有分片，MF＝0表示最后一个分片，中间一位位DF，当DF＝0时才允许有分片</li>\r\n<li class=\"has-line-data\" data-line-start=\"398\" data-line-end=\"401\"><strong>片位移</strong>，占13位，指出较长的分组在分片后某片在原本分组中的相对位置，片位移以<strong>8字节位偏移单位</strong>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"399\" data-line-end=\"400\">计算片偏移用数据部分的地址首位地址除以片偏移单位可得，即数据首地址/8</li>\r\n<li class=\"has-line-data\" data-line-start=\"400\" data-line-end=\"401\">例如3800的数据分为三段，第一段0－1399，片偏移为0/8＝0，第二段1400－2799，其片偏移为1400/8，第三段为2800－3799，即2800/8＝350</li>\r\n</ul>\r\n</li>\r\n<li class=\"has-line-data\" data-line-start=\"401\" data-line-end=\"402\"><strong>生存时间</strong>，占8位，记为ttl，指示数据报在网络中可通过的路由器数的最大值</li>\r\n<li class=\"has-line-data\" data-line-start=\"402\" data-line-end=\"403\"><strong>协议</strong>,占8位，指出此数据报携带的数据可以使用哪种协议，以便目的主机的IP层将数据部分上交给那个处理过程</li>\r\n<li class=\"has-line-data\" data-line-start=\"403\" data-line-end=\"406\"><strong>首部检验和</strong>,占16位，指检验数据报的首段，<strong>不检验数据部分</strong>,这里不采用CRC检验码而采用简单的计算方法\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"404\" data-line-end=\"406\"><strong>数据报每经过一个路由器，路由器都要重新计算一下首部检验和</strong></li>\r\n</ul>\r\n</li>\r\n</ul>', '计算机网络', '2024-12-30 17:35:22', 0);
INSERT INTO `article` VALUES (13, 12, '很好的', '计算机网络7', '<h3 class=\"code-line\" data-line-start=406 data-line-end=407 ><a id=\"43IP_406\"></a>4.3IP层转发分组的过程</h3>\r\n<h4 class=\"code-line\" data-line-start=407 data-line-end=408 ><a id=\"431_407\"></a>4.3.1基于终点的转发</h4>\r\n<p class=\"has-line-data\" data-line-start=\"408\" data-line-end=\"410\">分组在互联网中是<strong>逐跳转发</strong>的。<br>\r\n基于终点的转发：基于分组首部中的<strong>目的地址</strong>传送和转发。</p>\r\n<p class=\"has-line-data\" data-line-start=\"411\" data-line-end=\"413\">转发表中最主要的路由是（目的网络地址，下一跳地址）而非（目的地址，下一跳地址）。<br>\r\n<strong>查找转发表的过程就是逐行寻找前缀匹配</strong></p>\r\n<h4 class=\"code-line\" data-line-start=414 data-line-end=415 ><a id=\"432_414\"></a>4.3.2最长前缀匹配</h4>\r\n<p class=\"has-line-data\" data-line-start=\"415\" data-line-end=\"418\">使用CIDR时，在查找转发表时可能会得到不止一个匹配结果<br>\r\n最长前缀匹配原则：选择前缀最长的一个作为匹配的前缀<br>\r\n网络前缀越长，其地址块越小</p>\r\n<p class=\"has-line-data\" data-line-start=\"419\" data-line-end=\"420\"><strong>转发表中的2种特殊的路由:</strong></p>\r\n<blockquote>\r\n<p class=\"has-line-data\" data-line-start=\"420\" data-line-end=\"421\">主机路由</p>\r\n</blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"421\" data-line-end=\"422\">又叫特定主机路由</li>\r\n<li class=\"has-line-data\" data-line-start=\"422\" data-line-end=\"423\">是对特定目的的主机的IP地址专门指明的一个路由</li>\r\n<li class=\"has-line-data\" data-line-start=\"423\" data-line-end=\"424\">网络前缀就是a.b.c.d/32</li>\r\n<li class=\"has-line-data\" data-line-start=\"424\" data-line-end=\"425\">放在转发表的最前面</li>\r\n</ul>\r\n<blockquote>\r\n<p class=\"has-line-data\" data-line-start=\"425\" data-line-end=\"426\">默认路由</p>\r\n</blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"426\" data-line-end=\"427\">不管分组的最终目的网络在哪里，都由指定的路由器R来处理</li>\r\n<li class=\"has-line-data\" data-line-start=\"427\" data-line-end=\"429\">用特殊前缀0.0.0.0/0表示</li>\r\n</ul>\r\n<h4 class=\"code-line\" data-line-start=429 data-line-end=430 ><a id=\"433_429\"></a>4.3.3使用二叉线索查找转发表</h4>\r\n<p class=\"has-line-data\" data-line-start=\"430\" data-line-end=\"434\">二叉线索：一种特殊结构的树，可以快速在转发表中找到匹配的叶节点<br>\r\n二叉线索的根结点由顶向下最多32层，每一层对应于IP地址中的一位<br>\r\n可以使用<strong>唯一前缀</strong>来构造二叉线索<br>\r\n为了提高二叉线索的查找速度，使用了各种压缩技术</p>\r\n<p class=\"has-line-data\" data-line-start=\"435\" data-line-end=\"438\"><strong>用5个唯一前缀构成的二叉线索：</strong><br>\r\n规则：先检查IP地址左边的第一位，如为0，则第一层的节点就在根结点的左下方，如为1，则在右下方。接着往下检测，直到唯一前缀的最后一位，每个叶节点代表一个唯一前缀。<br>\r\n为检查网络前缀是否匹配，必须使二叉线索中的每一个叶节点包含所对应的网络前缀和子网掩码。</p>\r\n<h3 class=\"code-line\" data-line-start=439 data-line-end=440 ><a id=\"ICMP_439\"></a>ICMP报文协议</h3>\r\n<p class=\"has-line-data\" data-line-start=\"440\" data-line-end=\"442\">用于主机或者路由器报告差错情况的报告<br>\r\n是互联网标准协议，是IP层协议</p>\r\n<p class=\"has-line-data\" data-line-start=\"443\" data-line-end=\"444\">报文种类：**差错报告报文，或者询问报文</p>\r\n<blockquote></blockquote>\r\n<p class=\"has-line-data\" data-line-start=\"445\" data-line-end=\"446\">差错报告报文</p>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"446\" data-line-end=\"447\">3 （终点不可达）</li>\r\n<li class=\"has-line-data\" data-line-start=\"447\" data-line-end=\"448\">11（时间超过）</li>\r\n<li class=\"has-line-data\" data-line-start=\"448\" data-line-end=\"449\">12（参数问题）</li>\r\n<li class=\"has-line-data\" data-line-start=\"449\" data-line-end=\"451\">5（改变路由）<br>\r\n询问报文</li>\r\n<li class=\"has-line-data\" data-line-start=\"451\" data-line-end=\"452\">8或者0    （回送请求或者回答）</li>\r\n<li class=\"has-line-data\" data-line-start=\"452\" data-line-end=\"453\">13或者14    （时间戳请求或者回答）</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"455\" data-line-end=\"456\"><img src=\"https://p.sda1.dev/19/d9eddbe3d2ad226a34ceb3c2b95e923e/1000089266.jpg\" alt=\"1000089266.jpg\"></p>\r\n<h3 class=\"code-line\" data-line-start=457 data-line-end=458 ><a id=\"_457\"></a>互联网的路由选择协议</h3>\r\n<p class=\"has-line-data\" data-line-start=\"458\" data-line-end=\"460\">不存在最佳路由算法，最佳只是相对于某一种特定的要求下得出的较为合理的选择<br>\r\n路由选择非常复杂</p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"461\" data-line-end=\"462\">需要所有节点共同协同工作</li>\r\n<li class=\"has-line-data\" data-line-start=\"462\" data-line-end=\"463\">环境不断变化，而这种变化无法事先得知</li>\r\n<li class=\"has-line-data\" data-line-start=\"463\" data-line-end=\"465\">当网络发生拥塞时，很难获取所需的路由选择</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"465\" data-line-end=\"467\"><strong>路由算法分类</strong><br>\r\n<strong>静态路由选择策略</strong></p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"468\" data-line-end=\"469\">非自适应路由选择；</li>\r\n<li class=\"has-line-data\" data-line-start=\"469\" data-line-end=\"470\">不能及时适应网络状态的变化；</li>\r\n<li class=\"has-line-data\" data-line-start=\"470\" data-line-end=\"472\">简单，开销较小。<br>\r\n**动态路由选择策略 **</li>\r\n</ul>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"473\" data-line-end=\"474\">自适应路由选择</li>\r\n<li class=\"has-line-data\" data-line-start=\"474\" data-line-end=\"475\">能较好地适应网络状态的变化；</li>\r\n<li class=\"has-line-data\" data-line-start=\"475\" data-line-end=\"477\">实现较为复杂，开销较大。</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"477\" data-line-end=\"483\">互联网：<br>\r\n采用自适应的分布式路由选择协议<br>\r\n把整个路由分为较多的自治系统AS，采用分层次的路由选择协议<br>\r\n<strong>两个层次</strong><br>\r\n自治系统之间称为<strong>域间路由选择</strong><br>\r\n自治系统之内成为<strong>域内路由选择</strong></p>\r\n<p class=\"has-line-data\" data-line-start=\"484\" data-line-end=\"486\">内部网关常用：RIP，OSPS协议<br>\r\n外部网关使用最多：BGP－4</p>', '计算机网络', '2024-12-30 17:35:23', 0);
INSERT INTO `article` VALUES (14, 12, '很好的', '计算机网络8', '<p>123123123<img src=\"/img/fd0a90dd-4fd4-496d-a09b-<h3 class=\"code-line\" data-line-start=487 data-line-end=488 ><a id=\"RIP_487\"></a>RIP路由选择协议(内部网关常用)（基于距离向量）</h3>\r\n<p class=\"has-line-data\" data-line-start=\"488\" data-line-end=\"492\">路由信息协议 RIP(Routing Information Protocol)是一种分布式的、基于<strong>距离向量</strong>的路由选择协议。<br>\r\n是互联网的标准协议。<br>\r\n最大优点：<strong>简单</strong>。<br>\r\n要求网络中的每个路由器都要<strong>维护</strong>从它自己到其他每一个目的网络的距离记录。</p>\r\n<p class=\"has-line-data\" data-line-start=\"493\" data-line-end=\"497\"><strong>距离的定义</strong><br>\r\n路由器到<strong>直接连接的网络距离为1</strong><br>\r\n到<strong>非直接链接的网络距离＝经过的路由数＋1  **<br>\r\n这个距离也称为</strong>跳数**</p>\r\n<p class=\"has-line-data\" data-line-start=\"498\" data-line-end=\"502\">好路由=“距离短”的路由。<strong>最佳路由=“距离最短”的路由。</strong><br>\r\n一条路径<strong>最多</strong>只能包含 <strong>15 <strong>个路由器。<br>\r\n“距离”的</strong>最大值为 16时即相当于不可达</strong>。<br>\r\nRIP不能在两个网络之间同时使用多条路由，<strong>只选择距离最短</strong>的路由。</p>\r\n<p class=\"has-line-data\" data-line-start=\"503\" data-line-end=\"504\"><strong>RIP协议的特点</strong></p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"505\" data-line-end=\"506\">仅和<strong>相邻</strong>的路由交换信息</li>\r\n<li class=\"has-line-data\" data-line-start=\"506\" data-line-end=\"507\">交换的信息是当前本路由器所知道的全部信息，即自己的路由表。</li>\r\n<li class=\"has-line-data\" data-line-start=\"507\" data-line-end=\"509\">按固定时间间隔交换路由信息，例如，每隔 30秒。当网络拓扑发生变化时，路由器也及时向相邻路由器通告拓扑变化后的路由信息。</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"509\" data-line-end=\"514\"><strong>路由表建立</strong><br>\r\n在<strong>刚开始工作的时候路由表为空</strong><br>\r\n得到直连网络的距离<br>\r\n然后<strong>通过直连相邻网络</strong>交换并更新信息<br>\r\n若干次更新后知道到达<strong>任何</strong>一个网络的<strong>最佳距离</strong></p>\r\n<p class=\"has-line-data\" data-line-start=\"515\" data-line-end=\"520\">更新使用<strong>距离向量算法</strong>找到每个网络的最短距离<br>\r\n<strong>距离算法</strong><br>\r\n当收到<strong>X发送的报文</strong>时候，把下一跳地址改为<strong>X</strong>然后距离＋1，对于收到的报文中没有，但是自己有的网络将<strong>其距离改为1，并且不写下一跳直接交付</strong><br>\r\n如果其他的报文距离比X的<strong>距离更短</strong>时，我们选择使用<strong>其他报文</strong>来进行更新<br>\r\n如果三分钟内收不到相邻路由更新，那么将相邻路由标记为不可达路由器，即讲起距离设置为16</p>\r\n<p class=\"has-line-data\" data-line-start=\"521\" data-line-end=\"524\">RIP协议优缺点：<br>\r\n<strong>优点：</strong><br>\r\n实现简单，开销较小</p>\r\n<p class=\"has-line-data\" data-line-start=\"525\" data-line-end=\"529\"><strong>缺点：</strong><br>\r\n规模有限，最大距离为15<br>\r\n交换信息为完整路由表<br>\r\n坏消息传播慢</p>\r\n<h3 class=\"code-line\" data-line-start=530 data-line-end=531 ><a id=\"OSPF_530\"></a>OSPF协议(基于链路状态)</h3>\r\n<p class=\"has-line-data\" data-line-start=\"531\" data-line-end=\"537\">有五种分组分类<br>\r\n1.问候（Hello）分组。<br>\r\n2.数据库描述(Database Description）分组。<br>\r\n3.链路状态请求（LinkState Request）分组。<br>\r\n4.链路状态更新（Link State Update）分组。<br>\r\n5.链路状态确认（Link State Acknowledgment)分组。</p>\r\n<p class=\"has-line-data\" data-line-start=\"538\" data-line-end=\"539\">工作过程：</p>\r\n<blockquote></blockquote>\r\n<ol>\r\n<li class=\"has-line-data\" data-line-start=\"540\" data-line-end=\"543\"><strong>确定邻路可达</strong>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"541\" data-line-end=\"542\">相邻路由器每隔10秒钟要交换一次问候分组。</li>\r\n<li class=\"has-line-data\" data-line-start=\"542\" data-line-end=\"543\">若有 40秒钟没有收到某个相邻路由器发来的问候分组，则可认为该相邻路由器是不可达的。</li>\r\n</ul>\r\n</li>\r\n<li class=\"has-line-data\" data-line-start=\"543\" data-line-end=\"546\"><strong>同步链路状态数据库</strong>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"544\" data-line-end=\"545\">同步：指不同路由器的链路状态数据库的内容是一样的。</li>\r\n<li class=\"has-line-data\" data-line-start=\"545\" data-line-end=\"546\">两个同步的路由器叫做完全邻接的（fully adjacent）路由器。</li>\r\n</ul>\r\n</li>\r\n<li class=\"has-line-data\" data-line-start=\"546\" data-line-end=\"550\"><strong>更新链路状态</strong>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"547\" data-line-end=\"548\">只要链路状态发生变化，路由器就使用链路状态更新分组，采用可靠的洪泛法向全网更新链路状态。</li>\r\n<li class=\"has-line-data\" data-line-start=\"548\" data-line-end=\"550\">为确保链路状态数据库与全网的状态保持一致，OSPF还规定：每隔一段时间，如30分钟，要刷新一次数据库中的链路状态。</li>\r\n</ul>\r\n</li>\r\n</ol>\r\n<p class=\"has-line-data\" data-line-start=\"550\" data-line-end=\"553\">与RIP协议对比：<br>\r\nOSPF链路状态只涉及相邻路由器，与整个互连网的规模并无直接关系因此当互连网规模很大时，OSPF协议要比距离向量协议 RIP好得多。<br>\r\nOSPF没有“坏消息传播得慢”的问题，收敛数度快。</p>\r\n<p class=\"has-line-data\" data-line-start=\"554\" data-line-end=\"555\"><strong>主要特点</strong></p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"556\" data-line-end=\"557\">主要采用<strong>洪泛法</strong>,即想本系统内所有路由器发送信息</li>\r\n<li class=\"has-line-data\" data-line-start=\"557\" data-line-end=\"558\">发送信息是与所有相邻路由器状态，但是这只是路由器 知道的部分信息</li>\r\n<li class=\"has-line-data\" data-line-start=\"558\" data-line-end=\"560\">当变化或者每隔一段时间都会发送消息</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"560\" data-line-end=\"561\"><strong>链路状态数据库</strong></p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"562\" data-line-end=\"563\">每个路由器最终都能建立</li>\r\n<li class=\"has-line-data\" data-line-start=\"563\" data-line-end=\"564\"><strong>全网的拓扑结构图</strong></li>\r\n<li class=\"has-line-data\" data-line-start=\"564\" data-line-end=\"565\"><strong>在全网范围内是一致的</strong>(链路状态数据库的同步)</li>\r\n<li class=\"has-line-data\" data-line-start=\"565\" data-line-end=\"567\">每个路由器使用的链路状态数据库中的输就构造自己的路由表</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"567\" data-line-end=\"571\"><strong>优点</strong><br>\r\n减少网络的通信量和需要维护的状态<br>\r\n<strong>缺点</strong><br>\r\n交换信息的种类多了，使得OSPF协议复杂了</p>\r\n<p class=\"has-line-data\" data-line-start=\"572\" data-line-end=\"573\"><strong>与外部系统交流屎会选择一个路由器DR作为网络代表，使得广播信息量减少</strong></p>\r\n<h3 class=\"code-line\" data-line-start=574 data-line-end=575 ><a id=\"BGP_574\"></a>外部网关协议BGP（基于路径向量）</h3>\r\n<p class=\"has-line-data\" data-line-start=\"575\" data-line-end=\"578\">用于自治系统**(AS)<strong>之间的路由选择<br>\r\n<strong>目的</strong>：力求选择一条能到达目的网络且</strong>比较好的路由**(不兜圈子),而非<strong>计算出一条最优路径</strong><br>\r\n原因：互联网太大，自治系统选择困难，其选择也必须有一定的策略</p>\r\n<p class=\"has-line-data\" data-line-start=\"579\" data-line-end=\"581\">在AS之间，BGP发言者一般使用半永久性的**TCP链接(179端口)**建立BGP会话，对于外部的链接会话又称为eBGP协议<br>\r\n在内部的BGP链接会话又称为iBGP协议</p>\r\n<p class=\"has-line-data\" data-line-start=\"582\" data-line-end=\"584\"><strong>在AS内部运行</strong>:<br>\r\n内部网关协议IGP（OSPF/RIP）和iBGP</p>\r\n<p class=\"has-line-data\" data-line-start=\"585\" data-line-end=\"587\"><strong>在AS之间</strong><br>\r\neBGP协议</p>\r\n<p class=\"has-line-data\" data-line-start=\"588\" data-line-end=\"590\"><strong>iBGP和eBGP协议的区别</strong><br>\r\n通报前缀时候：eBGP的信息可以通报给iBGP和eBGP ,但是iBGP的信息不能通报给同为iBGP的终端</p>\r\n<p class=\"has-line-data\" data-line-start=\"591\" data-line-end=\"592\">BGP路由＝【前缀，BGP属性（自治系统路径，下一跳）】</p>\r\n<p class=\"has-line-data\" data-line-start=\"593\" data-line-end=\"594\"><strong>三种AS类型</strong></p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"595\" data-line-end=\"596\"><strong>末梢AS</strong>  不会把来自其他 AS 的分组再转发到另一个 AS。必须向所连接的 AS付费。</li>\r\n<li class=\"has-line-data\" data-line-start=\"596\" data-line-end=\"597\"><strong>多归属AS</strong>  同时连接到两个或两个以上的 AS。增加连接的可靠性。</li>\r\n<li class=\"has-line-data\" data-line-start=\"597\" data-line-end=\"598\"><strong>穿越AS</strong> 为其他 AS 有偿转发分组。</li>\r\n<li class=\"has-line-data\" data-line-start=\"598\" data-line-end=\"600\"><strong>对等AS</strong> 经过事先协商的两个AS，彼此之间的发送或接收分组都不收费。</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"600\" data-line-end=\"602\">BGP路由避免兜圈子：<br>\r\n通过检查自己的AS－PATH(自治系统路径)，不能出现相同的AS号</p>\r\n<p class=\"has-line-data\" data-line-start=\"603\" data-line-end=\"604\">BGP路由选择（按顺序优先级）：</p>\r\n<blockquote></blockquote>\r\n<ol>\r\n<li class=\"has-line-data\" data-line-start=\"605\" data-line-end=\"606\">本地偏好值最高（即给路由器设置喜好值优先）</li>\r\n<li class=\"has-line-data\" data-line-start=\"606\" data-line-end=\"607\">AS跳数最小的</li>\r\n<li class=\"has-line-data\" data-line-start=\"607\" data-line-end=\"608\">热土豆算法（AS本地转发数最小的）</li>\r\n<li class=\"has-line-data\" data-line-start=\"608\" data-line-end=\"610\">路由器BGP ID数值最小的，基友多个接口的路由器有多个IP，BGP ID就使用该路由器中IP地址最大的</li>\r\n</ol>\r\n<h3 class=\"code-line\" data-line-start=610 data-line-end=611 ><a id=\"IP_610\"></a>IP多播</h3>\r\n<p class=\"has-line-data\" data-line-start=\"611\" data-line-end=\"615\">目的：更好的支持一对多通信<br>\r\n即发送到对外路由器，由路由器复制分组，直接广播给下面的其他设备<br>\r\n在互联网上进行多播就叫<strong>IP多播</strong><br>\r\nIP多播的目的地址需要学如多播组和标识符，标识符是IP地址中的D类地址</p>\r\n<p class=\"has-line-data\" data-line-start=\"616\" data-line-end=\"621\">多播数据报和一般的 IP 数据报的区别：<br>\r\n<strong>目的地址</strong>：使用D类IP地址。<br>\r\n<strong>协议字段=2</strong>，表明使用网际组管理协议IGMP。<br>\r\n<strong>尽最大努力交付</strong>，不保证一定能够交付多播组内的所有成员.<br>\r\n对多播数据报**不产生 ICMP差错报文。**在 PING 命令后面键入多播地址，将永远不会收到响应。</p>\r\n<h3 class=\"code-line\" data-line-start=622 data-line-end=623 ><a id=\"VPN_622\"></a>虚拟局域网VPN</h3>\r\n<p class=\"has-line-data\" data-line-start=\"623\" data-line-end=\"624\">使用目的：</p>\r\n<ol>\r\n<li class=\"has-line-data\" data-line-start=\"624\" data-line-end=\"625\">因为地址稀缺</li>\r\n<li class=\"has-line-data\" data-line-start=\"625\" data-line-end=\"626\">互联网不安全</li>\r\n<li class=\"has-line-data\" data-line-start=\"626\" data-line-end=\"628\">单位需要组内部网络</li>\r\n</ol>\r\n<h2 class=\"code-line\" data-line-start=628 data-line-end=629 ><a id=\"_628\"></a>运输层（端对端，即进程到进程）</h2>\r\n<p class=\"has-line-data\" data-line-start=\"629\" data-line-end=\"630\">两个主要协议：</p>\r\n<ol>\r\n<li class=\"has-line-data\" data-line-start=\"630\" data-line-end=\"631\">用户数据报协议UDP</li>\r\n<li class=\"has-line-data\" data-line-start=\"631\" data-line-end=\"633\">传输控制协议 TCP</li>\r\n</ol>\r\n<p class=\"has-line-data\" data-line-start=\"633\" data-line-end=\"634\">两个对等运输实体在通信时的传输单位叫做:<strong>运输协议数据单位TPDU</strong></p>\r\n<p class=\"has-line-data\" data-line-start=\"635\" data-line-end=\"637\">TCP传送的输一局单位协议是<strong>TCP报文段</strong><br>\r\nUDP传送的数据单位协议是<strong>UDP报文</strong>或者<strong>用户数据报</strong></p>\r\n<p class=\"has-line-data\" data-line-start=\"638\" data-line-end=\"639\">UDP</p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"640\" data-line-end=\"641\">传送数据之前不需要链接</li>\r\n<li class=\"has-line-data\" data-line-start=\"641\" data-line-end=\"642\">收到后不需要回复</li>\r\n<li class=\"has-line-data\" data-line-start=\"642\" data-line-end=\"644\">不提供可靠交付，但是有效</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"644\" data-line-end=\"645\">TCP</p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"646\" data-line-end=\"647\">提供可靠的，面向连接的运输服务</li>\r\n<li class=\"has-line-data\" data-line-start=\"647\" data-line-end=\"648\">不提供广播或者多播服务</li>\r\n<li class=\"has-line-data\" data-line-start=\"648\" data-line-end=\"650\">开销较多</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"650\" data-line-end=\"653\">由于其进程到进程的特性，其必须分别交给指明的应用程序<br>\r\n但是其中的晋城的创建和撤销都是<strong>动态</strong>的，因此发送方无法识别其他机器的进程<br>\r\n因此我们采用了<strong>协议端口号</strong> 即端口，<strong>把端口设为通信的抽象终点</strong></p>\r\n<h3 class=\"code-line\" data-line-start=654 data-line-end=655 ><a id=\"TCPIP_654\"></a>TCP/IP运输层端口的标志</h3>\r\n<p class=\"has-line-data\" data-line-start=\"655\" data-line-end=\"657\">端口用一个<strong>16位端口号</strong>进行标志,即可以有65535个<br>\r\n端口号只具有<strong>本地意义</strong> ,即只是为了标志<strong>本计算机应用层中的各程序</strong></p>\r\n<p class=\"has-line-data\" data-line-start=\"658\" data-line-end=\"660\"><strong>两大类，三类型端口</strong><br>\r\n服务器用端口</p>\r\n<blockquote></blockquote>\r\n<p class=\"has-line-data\" data-line-start=\"661\" data-line-end=\"663\">0-1023 熟知端口 （IANA分配，全球通用）<br>\r\n1024-49151 登记端口（IANA登记）</p>\r\n<p class=\"has-line-data\" data-line-start=\"664\" data-line-end=\"665\">客户端端口</p>\r\n<blockquote></blockquote>\r\n<p class=\"has-line-data\" data-line-start=\"666\" data-line-end=\"668\">49152-65535<br>\r\n短暂端口，通信结束后收回</p>\r\n<h3 class=\"code-line\" data-line-start=669 data-line-end=670 ><a id=\"UDP_669\"></a>UDP协议</h3>\r\n<p class=\"has-line-data\" data-line-start=\"670\" data-line-end=\"671\">主要特点:简单方便，但不可靠</p>\r\n<blockquote></blockquote>\r\n<p class=\"has-line-data\" data-line-start=\"672\" data-line-end=\"676\">1.无连接。发送数据之前不需要建立连接.<br>\r\n2.使用尽最大努力交付。即不保证可靠交付。<br>\r\n3.面向报文。UDP一次传送和交付一个完整的报文。<br>\r\n4.没有拥塞控制。网络出现的拥塞不会使源主机的发送速率降低。很适合多媒体通信的更进</p>\r\n<ol start=\"5\">\r\n<li class=\"has-line-data\" data-line-start=\"676\" data-line-end=\"679\">支持一对一、一对多、多对一、多对多等交互通信<br>\r\n6.首部开销小，只有 8个字节。</li>\r\n</ol>\r\n<p class=\"has-line-data\" data-line-start=\"679\" data-line-end=\"685\"><strong>UDP的首部</strong><br>\r\n8字节，由以下四个组成<br>\r\n（1） 源端口：源端口号。在需要对方回信时选用。不需要时可用全0。<br>\r\n（2）目的端口：目的端口号。终点交付报文时必须使用。<br>\r\n（3）长度：UDP用户数据报的长度，其最小值是8（仅有首部)<br>\r\n（4）检验和：检测UDP用户数据报在传输中是否有错。有错就丢弃。</p>\r\n<p class=\"has-line-data\" data-line-start=\"686\" data-line-end=\"689\">计算校验和时，把12字节的<strong>伪首部</strong>(仅用于计算校验和)和用户数据报连接在一起<br>\r\n然后把首部和数据报部分一起检验<br>\r\n按二进制反码运算求和，得出结果求反码</p>', '计算机网络', '2024-12-30 17:35:23', 0);
INSERT INTO `article` VALUES (15, 12, '很好的', '计算机网络9', '<h3 class=\"code-line\" data-line-start=690 data-line-end=691 ><a id=\"TCP_690\"></a>TCP协议概述</h3>\r\n<p class=\"has-line-data\" data-line-start=\"691\" data-line-end=\"697\">主要特点<br>\r\nTCP是面向连接的运输层协议。<br>\r\n每一条 TCP 连接只能有两个端点(endpoint)，每一条 TCP 连接只能是点对点的（一对一）。<br>\r\nTCP 提供<strong>可靠交付</strong>的服务  。<br>\r\nTCP 提供<strong>全双工</strong>通信.<br>\r\n<strong>面向字节流</strong></p>\r\n<blockquote></blockquote>\r\n<ol>\r\n<li class=\"has-line-data\" data-line-start=\"698\" data-line-end=\"699\">TCP中的“流”（stream）指的是流入或流出进程的字节序列。</li>\r\n<li class=\"has-line-data\" data-line-start=\"699\" data-line-end=\"701\"><strong>面向字节流</strong>：虽然应用程序和TCP的交互是一次一个数据块，但TCP把应用程序交下来的数据看成仅仅是一连串无结构的字节流。</li>\r\n</ol>\r\n<p class=\"has-line-data\" data-line-start=\"701\" data-line-end=\"706\">不保证发送数据快具有对应大小，但是双方收发字节流必须一致<br>\r\nTCP 连接就是由协议软件所提供的一种抽象。<br>\r\nTCP连接的端点是抽象的套接字，即（IP地址：端口号）。<br>\r\n同一个IP地址可以有多个不同的TCP连接。<br>\r\n同一个端口号也可以出现在多个不同的TCP连接中。</p>\r\n<h3 class=\"code-line\" data-line-start=707 data-line-end=708 ><a id=\"_707\"></a>可靠传输的工作原理</h3>\r\n<p class=\"has-line-data\" data-line-start=\"708\" data-line-end=\"711\"><strong>停止等待协议</strong><br>\r\n发送完一个分组就停止发送，等待对方确认，然后再发<br>\r\n对于全双工来说，双方即使发送方也是接收方</p>\r\n<p class=\"has-line-data\" data-line-start=\"712\" data-line-end=\"714\"><strong>检验差错</strong><br>\r\n两种情况：</p>\r\n<ol>\r\n<li class=\"has-line-data\" data-line-start=\"714\" data-line-end=\"715\">接收方检验出差错即丢弃，然后什么就不做</li>\r\n<li class=\"has-line-data\" data-line-start=\"715\" data-line-end=\"718\">传输丢失<br>\r\n上面两种B什么都不会干</li>\r\n</ol>\r\n<p class=\"has-line-data\" data-line-start=\"718\" data-line-end=\"719\">解决办法：<strong>超时重传</strong></p>\r\n<p class=\"has-line-data\" data-line-start=\"720\" data-line-end=\"724\"><strong>确认丢失和确认迟到</strong><br>\r\n确认丢失<br>\r\n接收方的回复丢失，那么发送方会重传<br>\r\n那么B就会<strong>丢弃</strong>重复分组，<strong>并且再次发送确认</strong></p>\r\n<p class=\"has-line-data\" data-line-start=\"725\" data-line-end=\"729\">确认迟到<br>\r\n接收方的回复在计时器到期后再到<br>\r\n那么发送方<strong>还是会重传</strong>信息，接收方收到后<strong>丢弃</strong>重复的分组，并<strong>重传</strong>确认分组<br>\r\n发送方收到重复确认<strong>也会丢弃重复确认</strong></p>\r\n<p class=\"has-line-data\" data-line-start=\"730\" data-line-end=\"731\"><img src=\"https://p.sda1.dev/20/a14d8ad5ed1b8ba41f1e32ea48c350ba/Screenshot_2024-11-08-11-42-14-200_com.chaoxing.mobile-edit.jpg\" alt=\"Screenshot_2024-11-08-11-42-14-200_com.chaoxing.mobile-edit.jpg\"></p>\r\n<p class=\"has-line-data\" data-line-start=\"732\" data-line-end=\"733\">提高效率也可以使用流水线传输，即收到确认前一直发送</p>\r\n<p class=\"has-line-data\" data-line-start=\"734\" data-line-end=\"738\"><strong>连续ARQ协议</strong><br>\r\n<strong>发送窗口</strong>：发送方维持一个发送窗口，位于发送窗口内的分组都可被连续发送出去，而不需要等待对方的确认。<br>\r\n<strong>发送窗口滑动</strong>：发送方每收到一个确认，就把发送窗口向前滑动一个分组的位置。<br>\r\n<strong>累积确认</strong>：接收方对按序到达的最后一个分组发送确认，表示：到这个分组为止的所有分组都已正确收到了。</p>\r\n<p class=\"has-line-data\" data-line-start=\"739\" data-line-end=\"743\"><strong>TCP报文段首部</strong><br>\r\n长度：4n字节<br>\r\n最小长度为20字节（即必要部分长度）<br>\r\n包含：</p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"744\" data-line-end=\"745\">源端口和目的端口：各2字节</li>\r\n<li class=\"has-line-data\" data-line-start=\"745\" data-line-end=\"746\">序号：4字节，TCP传输的每一个字节都有一个序号，本子短指本报文段发送的第一个字节的序号</li>\r\n<li class=\"has-line-data\" data-line-start=\"746\" data-line-end=\"747\">确认号：4字节，<strong>期望收到</strong>对方的下一个报文段的第一个字节的序列号</li>\r\n<li class=\"has-line-data\" data-line-start=\"747\" data-line-end=\"748\">数据偏移：4字节，指出TCP报文段的数据起始处距离报文段起始处的距离</li>\r\n<li class=\"has-line-data\" data-line-start=\"748\" data-line-end=\"749\">保留：6字节，留后用</li>\r\n<li class=\"has-line-data\" data-line-start=\"749\" data-line-end=\"750\">紧急URG字段：启用（即该字段为1，后面如此）时候，表示该报文紧急有高优先度</li>\r\n<li class=\"has-line-data\" data-line-start=\"750\" data-line-end=\"751\">确认ACK：启用时表明确认号有效</li>\r\n<li class=\"has-line-data\" data-line-start=\"751\" data-line-end=\"752\">推送PSH：启用时，尽快向前交付，不用等缓存填满</li>\r\n<li class=\"has-line-data\" data-line-start=\"752\" data-line-end=\"753\">复位RST：启用时表示前面有严重差错，必须释放重新连接</li>\r\n<li class=\"has-line-data\" data-line-start=\"753\" data-line-end=\"754\">同步SYN：启用时表示这是链接请求，如果ACK启用则这是<strong>连接接受</strong>报文段，如果ACK未启用则这是<strong>链接请求</strong>字段</li>\r\n<li class=\"has-line-data\" data-line-start=\"754\" data-line-end=\"755\">窗口：2字节，告诉对方本报文段首部中的确认号算起，接收方目前允许对方发送的数据量</li>\r\n<li class=\"has-line-data\" data-line-start=\"755\" data-line-end=\"756\">检验和：2字节，相对于UDP，计算是一样的，但是其必须<strong>不仅包含首部  ，还包含数据</strong></li>\r\n<li class=\"has-line-data\" data-line-start=\"756\" data-line-end=\"757\">紧急指针：2字节，当URG启用时，指出报文段中紧急数据的字节数，并且指出了紧急数据的末尾在报文中的位置</li>\r\n<li class=\"has-line-data\" data-line-start=\"757\" data-line-end=\"758\">选项：最长40字节的长度可变</li>\r\n<li class=\"has-line-data\" data-line-start=\"758\" data-line-end=\"760\">填充：用于让整体成为4n字节长度</li>\r\n</ul>\r\n<h3 class=\"code-line\" data-line-start=760 data-line-end=761 ><a id=\"TCP_760\"></a>TCP可靠传输的实现</h3>\r\n<p class=\"has-line-data\" data-line-start=\"761\" data-line-end=\"765\"><strong>以字节为单位的滑动窗口</strong><br>\r\nTCP使用流水线传输和滑动窗口保持高效可靠的传输<br>\r\nTCP的滑动窗口是以<strong>字节为单位</strong><br>\r\n发送方和接收方分别维持一个发送窗口和接受端口</p>\r\n<p class=\"has-line-data\" data-line-start=\"766\" data-line-end=\"767\"><img src=\"https://p.sda1.dev/20/c3d179302eeae59045ee501ed30401df/1000095736.jpg\" alt=\"1000095736.jpg\"></p>\r\n<h3 class=\"code-line\" data-line-start=768 data-line-end=769 ><a id=\"TCP_768\"></a>TCP流量控制</h3>\r\n<p class=\"has-line-data\" data-line-start=\"769\" data-line-end=\"776\">流量控制：让发送方的发送的速率不要太快，使接收方来得及接收。<br>\r\n利用<strong>滑动窗口机制</strong>可以很方便地在TCP连接上实现对发送方的流量控制<br>\r\n例如：<br>\r\nA向B发送数据,MSS=100字节，在连接建立时，B告诉A接收窗口rwnd＝400（字节）<br>\r\n在传输过程中，在发送序号201时丢失，此时允许A发送序号201至500共300字节；之后A发送了序号哦啊301－500共200字节不能再发送新数据了，A超时重传旧的数据，但不能发送新的数据了；然后允许A发送序号501－600而后不允许A再发送（到序号600的数据都收到了）<br>\r\n<strong>在以上例子中可能会发生死锁</strong><br>\r\n在最后的一步传序号600之后（A已发完到序号600的数据），可能还会允许A发送序号601－1000共400字节，此时会等待A发送。</p>\r\n<h3 class=\"code-line\" data-line-start=777 data-line-end=778 ><a id=\"_777\"></a>持续计时器（解决死锁）</h3>\r\n<p class=\"has-line-data\" data-line-start=\"778\" data-line-end=\"779\">持续计时器：只要TCP连接的一方收到对方的零窗口通知，就启动该持续计时器</p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"780\" data-line-end=\"784\">若持续计时器设置的时间到期，就发送一个零窗口探测报文段（仅携带1字节的数据）\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"781\" data-line-end=\"782\">如果窗口仍然为0则接收方重新设置计时器</li>\r\n<li class=\"has-line-data\" data-line-start=\"782\" data-line-end=\"784\">如果不为0则死锁破局</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<h2 class=\"code-line\" data-line-start=784 data-line-end=785 ><a id=\"TCP_784\"></a>TCP拥塞控制</h2>\r\n<p class=\"has-line-data\" data-line-start=\"785\" data-line-end=\"786\">一定时间内对网络的资源需求超过资源能提供的部分，那么性能显著变差，甚至崩溃，这样的成为拥塞</p>\r\n<p class=\"has-line-data\" data-line-start=\"787\" data-line-end=\"789\"><strong>拥塞控制与流量控制</strong><br>\r\n拥塞控制</p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"790\" data-line-end=\"791\">防止过多的数据注入到网络中，避免网络中的路由器或链路过载。</li>\r\n<li class=\"has-line-data\" data-line-start=\"791\" data-line-end=\"793\">是一个全局性的过程，涉及到所有的主机、路由器，以及与降低网络传输性能有关的所有因素。</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"793\" data-line-end=\"794\">流量控制</p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"795\" data-line-end=\"796\">抑制发送端发送数据的速率以使接收端来得及接收。</li>\r\n<li class=\"has-line-data\" data-line-start=\"796\" data-line-end=\"798\">点对点通信量的控制，是个端到端的问题。</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"798\" data-line-end=\"799\"><strong>拥塞控制的原理</strong></p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"800\" data-line-end=\"801\"><strong>拥塞控制的前提</strong>：网络能够承受现有的网络负荷。</li>\r\n<li class=\"has-line-data\" data-line-start=\"801\" data-line-end=\"802\">分组的丢失是网络发生拥塞的征兆，而不是原因。</li>\r\n<li class=\"has-line-data\" data-line-start=\"802\" data-line-end=\"804\">在许多情况下，甚至正是<strong>拥塞控制本身</strong>成为引起网络性能恶化、甚至发生死锁的原因。</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"804\" data-line-end=\"805\">开环控制</p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"806\" data-line-end=\"807\">在设计网路时，先考虑周全，力求工作时不阻塞。</li>\r\n<li class=\"has-line-data\" data-line-start=\"807\" data-line-end=\"809\">系统运行后不再中途改正。</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"809\" data-line-end=\"810\">闭环控制</p>\r\n<blockquote></blockquote>', '计算机网络', '2024-12-30 17:35:25', 0);
INSERT INTO `article` VALUES (16, 12, '很好的', '第16', '<p>阿萨德<img src=\"/img/4c7be021-c216-4e2c-a8d5-32d95e8f5513.jpg\"></p>', '16', '2024-12-29 16:27:01', 0);
INSERT INTO `article` VALUES (17, 13, '邓晓枫', '软件工程1', '<h1 class=\"code-line\" data-line-start=0 data-line-end=1 ><a id=\"_0\"></a>软件工程</h1>\r\n<h2 class=\"code-line\" data-line-start=1 data-line-end=2 ><a id=\"_1\"></a>软件工程概述</h2>\r\n<p class=\"has-line-data\" data-line-start=\"3\" data-line-end=\"4\"><strong>软件工程的基本目标是优质高产</strong></p>\r\n<h3 class=\"code-line\" data-line-start=5 data-line-end=6 ><a id=\"13__5\"></a>1.3 软件生命周期</h3>\r\n<h4 class=\"code-line\" data-line-start=6 data-line-end=7 ><a id=\"_6\"></a><strong>软件定义时期:</strong></h4>\r\n<ol>\r\n<li class=\"has-line-data\" data-line-start=\"7\" data-line-end=\"8\">问题定义</li>\r\n<li class=\"has-line-data\" data-line-start=\"8\" data-line-end=\"9\">可行性研究</li>\r\n<li class=\"has-line-data\" data-line-start=\"9\" data-line-end=\"10\">需求分析</li>\r\n<li class=\"has-line-data\" data-line-start=\"10\" data-line-end=\"11\">总体设计</li>\r\n<li class=\"has-line-data\" data-line-start=\"11\" data-line-end=\"12\">详细设计</li>\r\n<li class=\"has-line-data\" data-line-start=\"12\" data-line-end=\"13\">编码</li>\r\n<li class=\"has-line-data\" data-line-start=\"13\" data-line-end=\"14\">单元测试</li>\r\n<li class=\"has-line-data\" data-line-start=\"14\" data-line-end=\"17\">综合测试<br>\r\n维护</li>\r\n</ol>\r\n<h3 class=\"code-line\" data-line-start=17 data-line-end=18 ><a id=\"14__17\"></a>1.4 软件过程</h3>\r\n<h4 class=\"code-line\" data-line-start=18 data-line-end=19 ><a id=\"141__18\"></a>1.4.1 瀑布模型</h4>\r\n<p class=\"has-line-data\" data-line-start=\"19\" data-line-end=\"23\">瀑布模型<strong>一直是唯一</strong>被广泛采用的生命周期模型<br>\r\n<strong>文档驱动型</strong><br>\r\n典型的瀑布模型:<br>\r\n<img src=\"https://pic.imge.cc/2024/09/09/66de8e327898f.jpg\" alt=\"Image_1725861417584.jpg\"></p>\r\n<p class=\"has-line-data\" data-line-start=\"24\" data-line-end=\"26\">但是实际上很难做到理想化，因此还会有反馈型的瀑布模型<br>\r\n<img src=\"https://pic.imge.cc/2024/09/09/66de9114f38a4.jpg\" alt=\"Image_1725862151317.jpg\"></p>\r\n<p class=\"has-line-data\" data-line-start=\"27\" data-line-end=\"28\">瀑布模型的优点：</p>\r\n<ol>\r\n<li class=\"has-line-data\" data-line-start=\"28\" data-line-end=\"29\">强迫开发人员使用规范方法</li>\r\n<li class=\"has-line-data\" data-line-start=\"29\" data-line-end=\"30\">严格规定每个阶段必须提交的文档</li>\r\n<li class=\"has-line-data\" data-line-start=\"30\" data-line-end=\"31\">保证每个阶段的产品都经过质量验证</li>\r\n</ol>\r\n<p class=\"has-line-data\" data-line-start=\"33\" data-line-end=\"34\">瀑布模型缺点:</p>\r\n<ol>\r\n<li class=\"has-line-data\" data-line-start=\"34\" data-line-end=\"35\">开发周期长</li>\r\n<li class=\"has-line-data\" data-line-start=\"35\" data-line-end=\"37\">用户不一定能及时表达需求并提出修改意见</li>\r\n</ol>\r\n<h4 class=\"code-line\" data-line-start=37 data-line-end=38 ><a id=\"142__37\"></a>1.4.2 快速原型模型</h4>\r\n<p class=\"has-line-data\" data-line-start=\"38\" data-line-end=\"39\">通过快速产出一个原型，来和用户交互验证需求</p>\r\n<p class=\"has-line-data\" data-line-start=\"40\" data-line-end=\"41\">快速原型模型优点:</p>\r\n<ol>\r\n<li class=\"has-line-data\" data-line-start=\"41\" data-line-end=\"42\">原型系统已经通过与用户交互而得到验证,据此产生的文档正确的描述了需求，在后续不会因为文档的错误而造成较大返工.</li>\r\n<li class=\"has-line-data\" data-line-start=\"42\" data-line-end=\"44\">开发人员通过建立原型系统学习更多，在后续阶段发生错误的可能性降低，减少犯错可能性。</li>\r\n</ol>\r\n<p class=\"has-line-data\" data-line-start=\"44\" data-line-end=\"45\">快速原型模型缺点:</p>\r\n<ol>\r\n<li class=\"has-line-data\" data-line-start=\"45\" data-line-end=\"46\">对首次项目不友好，无相关经验的情况下容易原型特别粗糙.</li>\r\n<li class=\"has-line-data\" data-line-start=\"46\" data-line-end=\"48\">对于硬件方面原型可能并未那么容易适配</li>\r\n</ol>\r\n<h4 class=\"code-line\" data-line-start=48 data-line-end=49 ><a id=\"143__48\"></a>1.4.3 增量模型</h4>\r\n<p class=\"has-line-data\" data-line-start=\"49\" data-line-end=\"51\">增量模型在开发软件时，把软件产品作为<strong>一系列增量构件来设计，编码，集成和测试</strong>，每个构建由多个相互作用的模块构成，并且能实现特定功能. 第一个构件能实现基本主干功能。例如游戏本体和DLC<br>\r\n需求分析 -&gt; 规格说明 -&gt; 概要设计 -&gt; 针对每个构建，完成详细设计，编码和集成，测试后交给用户</p>\r\n<p class=\"has-line-data\" data-line-start=\"52\" data-line-end=\"53\">增量模型的困难:</p>\r\n<ol>\r\n<li class=\"has-line-data\" data-line-start=\"53\" data-line-end=\"54\">在每个新的构建集成到现有软件体系结构中不必破坏原本的产品</li>\r\n<li class=\"has-line-data\" data-line-start=\"54\" data-line-end=\"56\">必须吧软件体系设计成便于按照这种方式扩充的，让其加入新构件过程简单，也就是说其结构体系必须是开放的</li>\r\n</ol>\r\n<h4 class=\"code-line\" data-line-start=56 data-line-end=57 ><a id=\"144__56\"></a>1.4.4 螺旋模型</h4>\r\n<p class=\"has-line-data\" data-line-start=\"57\" data-line-end=\"59\">基于瀑布模型之上加上<strong>风险分析</strong><br>\r\n适合内部的大型项目开发:  能找到风险，分析风险的团队</p>\r\n<h4 class=\"code-line\" data-line-start=60 data-line-end=61 ><a id=\"145__60\"></a>1.4.5 喷泉模型</h4>\r\n<h4 class=\"code-line\" data-line-start=62 data-line-end=63 ><a id=\"146_Rational__62\"></a>1.4.6 Rational 统一过程</h4>\r\n<p class=\"has-line-data\" data-line-start=\"63\" data-line-end=\"67\">初始阶段<br>\r\n精化阶段<br>\r\n构建阶段<br>\r\n移交阶段</p>', '软件工程', '2020-12-18 17:38:18', 0);
INSERT INTO `article` VALUES (18, 13, '邓晓枫', '软件工程2', '<h4 class=\"code-line\" data-line-start=68 data-line-end=69 ><a id=\"147__68\"></a>1.4.7 敏捷过程和极限编程：</h4>\r\n<p class=\"has-line-data\" data-line-start=\"69\" data-line-end=\"70\"><strong>敏捷过程</strong>为了使软件开发团队具有高效工作和快速响应变化的能力:</p>\r\n<ol>\r\n<li class=\"has-line-data\" data-line-start=\"71\" data-line-end=\"72\">个体和交互胜过过程和工具</li>\r\n<li class=\"has-line-data\" data-line-start=\"72\" data-line-end=\"73\">可以工作的软件胜过面面俱到的文档</li>\r\n<li class=\"has-line-data\" data-line-start=\"73\" data-line-end=\"74\">客户合作胜过合同谈判</li>\r\n<li class=\"has-line-data\" data-line-start=\"74\" data-line-end=\"76\">响应变化胜过遵循计划</li>\r\n</ol>\r\n<p class=\"has-line-data\" data-line-start=\"76\" data-line-end=\"77\"><strong>但是，请记住，完全没有文档的软件是一种灾难</strong></p>\r\n<p class=\"has-line-data\" data-line-start=\"78\" data-line-end=\"79\"><strong>极限编程</strong> 把好的开发实践运用到极致</p>\r\n<p class=\"has-line-data\" data-line-start=\"80\" data-line-end=\"81\"><img src=\"https://pic.imge.cc/2024/09/13/66e3dd54296a0.jpg\" alt=\"IMG_20240913_143440.jpg\"></p>\r\n<p class=\"has-line-data\" data-line-start=\"82\" data-line-end=\"83\"><img src=\"https://pic.imge.cc/2024/09/13/66e3dd5453de8.jpg\" alt=\"IMG_20240913_143539.jpg\"></p>\r\n<h2 class=\"code-line\" data-line-start=84 data-line-end=85 ><a id=\"21_84\"></a>2.1可行性研究</h2>\r\n<h4 class=\"code-line\" data-line-start=85 data-line-end=86 ><a id=\"__85\"></a>分析过程 ：</h4>\r\n<p class=\"has-line-data\" data-line-start=\"86\" data-line-end=\"88\">分析和澄清问题定义<br>\r\n分析员导出系统的模型</p>\r\n<h4 class=\"code-line\" data-line-start=89 data-line-end=90 ><a id=\"_89\"></a>研究的任务：</h4>\r\n<p class=\"has-line-data\" data-line-start=\"90\" data-line-end=\"93\">技术可行性：今技术可否实现该系统？<br>\r\n经济可行性：该系统收益能否超过开发成本？<br>\r\n操作可行性：操作方式对于用户</p>\r\n<h3 class=\"code-line\" data-line-start=95 data-line-end=96 ><a id=\"22_95\"></a>2.2可行性研究过程</h3>\r\n<ol>\r\n<li class=\"has-line-data\" data-line-start=\"96\" data-line-end=\"97\">复查系统规模和目标</li>\r\n<li class=\"has-line-data\" data-line-start=\"97\" data-line-end=\"98\">研究目前正在使用的系统</li>\r\n<li class=\"has-line-data\" data-line-start=\"98\" data-line-end=\"100\">导出新系统的高层逻辑模型<br>\r\n4.进一步定义问题</li>\r\n<li class=\"has-line-data\" data-line-start=\"100\" data-line-end=\"101\">导出和评价供选择的解法</li>\r\n<li class=\"has-line-data\" data-line-start=\"101\" data-line-end=\"102\">推荐行动方针</li>\r\n<li class=\"has-line-data\" data-line-start=\"102\" data-line-end=\"103\">草拟开发计划书</li>\r\n<li class=\"has-line-data\" data-line-start=\"103\" data-line-end=\"105\">写文档提交审查</li>\r\n</ol>\r\n<h3 class=\"code-line\" data-line-start=105 data-line-end=106 ><a id=\"23_105\"></a>2.3系统流程图</h3>\r\n<p class=\"has-line-data\" data-line-start=\"106\" data-line-end=\"107\"><strong>系统流程图是概括地描绘物理系统的传统工具</strong></p>\r\n<p class=\"has-line-data\" data-line-start=\"108\" data-line-end=\"109\">利用基本符号之间的关系，概括抽象地描绘一个实际系统</p>\r\n<h3 class=\"code-line\" data-line-start=110 data-line-end=111 ><a id=\"24DFD_110\"></a>2.4数据流图（DFD）</h3>\r\n<p class=\"has-line-data\" data-line-start=\"111\" data-line-end=\"115\">矩形——数据的源点或终点<br>\r\n圆矩形或圆形——变换数据的处理<br>\r\n方C或==——数据存储<br>\r\n➡️——数据流</p>\r\n<p class=\"has-line-data\" data-line-start=\"117\" data-line-end=\"118\">为处理命名时应该注意的问题</p>\r\n<ol>\r\n<li class=\"has-line-data\" data-line-start=\"118\" data-line-end=\"119\">通常应该<strong>先为数据流命名</strong>,然后再<strong>为与之相关联的处理命名</strong>.</li>\r\n<li class=\"has-line-data\" data-line-start=\"119\" data-line-end=\"120\">名字应该反应其整个处理的功能，而不是部分功能.</li>\r\n<li class=\"has-line-data\" data-line-start=\"120\" data-line-end=\"121\">名字最好有一个具体的及物动词加上具体的宾语组成</li>\r\n<li class=\"has-line-data\" data-line-start=\"121\" data-line-end=\"123\">名字仅包含一个动词</li>\r\n</ol>\r\n<p class=\"has-line-data\" data-line-start=\"123\" data-line-end=\"124\">用途:</p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"125\" data-line-end=\"126\">画数据流图的基本目的是利用它作为<strong>交流信息</strong>的工具.</li>\r\n<li class=\"has-line-data\" data-line-start=\"126\" data-line-end=\"127\">数据流图的另一个主要用途是作为<strong>分析和设计</strong>的工具。</li>\r\n<li class=\"has-line-data\" data-line-start=\"127\" data-line-end=\"129\">数据流图辅助物理系统的设计时，以图中不同处理的定时要求为指南，能够在数据流图上画出许多组自动化边界，每组自动化边界可能意味着一个不同的物理系统。</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"129\" data-line-end=\"133\">###2.5 数据字典<br>\r\n<strong>概念</strong><br>\r\n<strong>数据字典</strong>是关于<strong>数据的信息的集合</strong>，也就是对数据流图中包含的所有<strong>元素的定义的集合</strong>。<br>\r\n三种基本类型：</p>\r\n<blockquote></blockquote>\r\n<p class=\"has-line-data\" data-line-start=\"134\" data-line-end=\"137\">顺序<br>\r\n选择<br>\r\n重复</p>\r\n<p class=\"has-line-data\" data-line-start=\"139\" data-line-end=\"146\">###2.6 成本效益分析<br>\r\n<strong>成本估计</strong><br>\r\n软件开发成本主要表现为人力消耗（乘以平均工资则得到开发费用）。成本估计不是精确的科学，因此应该使用几种不同的估计技术以便相互校验。<br>\r\n下面简单介绍3种估算技术。<br>\r\n1.代码行技术<br>\r\n2.任务分解技术<br>\r\n3.自动估计成本技术</p>\r\n<p class=\"has-line-data\" data-line-start=\"147\" data-line-end=\"148\">##3 需求分析</p>\r\n<h3 class=\"code-line\" data-line-start=148 data-line-end=149 ><a id=\"31__148\"></a>3.1 确定对系统的综合要求</h3>\r\n<p class=\"has-line-data\" data-line-start=\"149\" data-line-end=\"150\"><strong>八大需求</strong>：</p>\r\n<blockquote></blockquote>\r\n<ol>\r\n<li class=\"has-line-data\" data-line-start=\"151\" data-line-end=\"153\"><strong>功能需求</strong>:<br>\r\n这方面的需求指定系统必须提供的服务。通过需求分析应该划分出系统必须完成的所有功能.</li>\r\n</ol>\r\n<blockquote></blockquote>\r\n<ol start=\"2\">\r\n<li class=\"has-line-data\" data-line-start=\"154\" data-line-end=\"156\"><strong>性能需求</strong>:<br>\r\n性能需求指定系统必须满足的<strong>定时约束或容量约束</strong>,通常包括<strong>速度(响应时间)、信息量速率、主存容量、磁盘容量、安全性</strong>等方面的需求。</li>\r\n</ol>\r\n<blockquote></blockquote>\r\n<ol start=\"3\">\r\n<li class=\"has-line-data\" data-line-start=\"157\" data-line-end=\"159\"><strong>可靠性和可用性需求</strong>:<br>\r\n可靠性需求定量地指定系统的可靠性，<strong>可用性与可靠性</strong>密切相关，它量化了用户可以使用系统的程度。</li>\r\n</ol>\r\n<blockquote></blockquote>\r\n<ol start=\"4\">\r\n<li class=\"has-line-data\" data-line-start=\"160\" data-line-end=\"162\"><strong>出错处理需求</strong>:<br>\r\n这类需求说明系统对环境错误应该怎样响应。例如,如果它接收到从另一个系统发来的违反协议格式的消息，应该做什么？注意，上述这类错误并不是由该应用系统本身造成的。</li>\r\n</ol>\r\n<blockquote></blockquote>\r\n<ol start=\"5\">\r\n<li class=\"has-line-data\" data-line-start=\"163\" data-line-end=\"165\"><strong>接口需求</strong>:<br>\r\n接口需求描述应用系统与它的环境通信的格式。常见的接口需求有：用户接口需求；硬件接口需求；软件接口需求；通信接口需求。</li>\r\n</ol>\r\n<blockquote></blockquote>\r\n<ol start=\"6\">\r\n<li class=\"has-line-data\" data-line-start=\"166\" data-line-end=\"168\"><strong>约束</strong>:<br>\r\n设计约束或实现约束描述在设计或实现应用系统时应遵守的限制条件。常见的约束有：<strong>精度；工具和语言</strong>约束;应该使用的<strong>标准</strong>；应该使用的<strong>硬件平台</strong>。</li>\r\n</ol>\r\n<blockquote></blockquote>\r\n<ol start=\"7\">\r\n<li class=\"has-line-data\" data-line-start=\"169\" data-line-end=\"171\"><strong>逆向需求</strong>:<br>\r\n逆向需求说明<strong>软件系统不应该做什么</strong>。理论上有无限多个逆向需求，人们应该仅选取能澄清真实需求且可消除可能发生的误解的那些逆向需求。</li>\r\n</ol>\r\n<blockquote></blockquote>\r\n<ol start=\"8\">\r\n<li class=\"has-line-data\" data-line-start=\"172\" data-line-end=\"175\"><strong>将来可能的需求</strong>:<br>\r\n应该明确地列出那些虽然不属于当前系统开发范畴，但是据分析将来很可能会提出来的要求。这样做的目的是,在设计过程中对系统将来可能的扩充和修改预做准备，以便一旦确实需要时能比较容易地进行这种扩充和修改。</li>\r\n</ol>\r\n<h3 class=\"code-line\" data-line-start=175 data-line-end=176 ><a id=\"33__175\"></a>3.3 分析建模与规模说明</h3>\r\n<p class=\"has-line-data\" data-line-start=\"176\" data-line-end=\"177\"><strong>分析建模</strong></p>\r\n<blockquote>\r\n<p class=\"has-line-data\" data-line-start=\"177\" data-line-end=\"178\"><strong>模型，就是为了理解事物而对事物作出的一种抽象，是对事物的一种无歧义的书面描述。</strong></p>\r\n</blockquote>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"180\" data-line-end=\"182\"><strong>数据模型</strong><br>\r\n实体关系图: 数据模型中包含3种相互关联的信息：<strong>数据对象</strong>、数据对象的<strong>属性</strong>及数据对象彼此间<strong>相互连接的关系。</strong></li>\r\n</ul>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"183\" data-line-end=\"185\"><strong>功能模型</strong><br>\r\n数据流图</li>\r\n</ul>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"186\" data-line-end=\"189\"><strong>行为模型</strong><br>\r\n收到外界刺激系统如何反应</li>\r\n</ul>\r\n<h4 class=\"code-line\" data-line-start=189 data-line-end=190 ><a id=\"_189\"></a>最终归类为<strong>软件需求规格说明书</strong></h4>\r\n<blockquote>\r\n<p class=\"has-line-data\" data-line-start=\"190\" data-line-end=\"191\">软件需求规格说明书是需求分析阶段得出最主要的文档</p>\r\n</blockquote>\r\n<h3 class=\"code-line\" data-line-start=193 data-line-end=194 ><a id=\"36__193\"></a>3.6 状态转换图</h3>\r\n<p class=\"has-line-data\" data-line-start=\"194\" data-line-end=\"198\">状态转换图（简称为状态图)通过<strong>描绘系统的状态</strong>及<strong>引起系统状态转换的事件</strong>，来表示系统的行为。此外，状态图还<strong>指明了作为特定事件的结果系统将做哪些动作</strong>。<br>\r\n在状态图中定义的状态主要有：初态（即初始状态）、终态(即最终状态)和中间状态。<strong>在一张状态图中只能有一个初态，而终态则可以有0至多个.<br>\r\n状态图既可以表示系统循环运行过程，也可以表示系统<br>\r\n单程生命期。</strong></p>\r\n<p class=\"has-line-data\" data-line-start=\"199\" data-line-end=\"200\"><img src=\"https://p.sda1.dev/19/6a0f716fb83bcce969be72311e28c381/1000074165.jpg\" alt=\"1000074165.jpg\"></p>\r\n<h3 class=\"code-line\" data-line-start=201 data-line-end=202 ><a id=\"52__201\"></a>5.2 设计原理</h3>\r\n<h4 class=\"code-line\" data-line-start=202 data-line-end=203 ><a id=\"_202\"></a>模块化</h4>\r\n<p class=\"has-line-data\" data-line-start=\"203\" data-line-end=\"208\"><strong>模块</strong>是由边界元素限定的<strong>相邻程序元素</strong>（例如，<strong>数据说明，可执行的语句</strong>）的序列，而且有一个总体标识符代表它.<strong>模块</strong>是构成程序的基本构件。<br>\r\n<strong>模块化</strong>就是把程序划分成独立命名且可独立访问的模块,每个模块完成一个子功能，把这些模块集成起来构成一个整体，可以完成指定的功能满足用户的需求。<br>\r\n模块化是为了使一个更复杂的大型程序能被人的治理所管理，是软件应该具备的唯一属性.<br>\r\n分割模块能使开发效率提高，同时降低成本<br>\r\n但是不断分割的同时由于需要接口链接反而<strong>可能会增加成本</strong></p>\r\n<p class=\"has-line-data\" data-line-start=\"209\" data-line-end=\"210\">因此我们需要<strong>限制模块的规模</strong></p>\r\n<p class=\"has-line-data\" data-line-start=\"211\" data-line-end=\"213\">虽然目前还不能精确地决定M的数值，但是在考虑模块化的时候总成本曲线确实是有用的指南<br>\r\n采用<strong>模块化</strong>原理可以使<strong>软件结构清晰</strong>，不仅容易设计也容易阅读和理解。模块化<strong>也有助于</strong>软件开发工程的<strong>组织管理</strong>,一个复杂的大型程序可以由许多<strong>程序员分工编写</strong>不同的模块，并且可以进一步分配技术熟练的程序员编写困难的模块。</p>\r\n<h4 class=\"code-line\" data-line-start=214 data-line-end=215 ><a id=\"_214\"></a>抽象</h4>\r\n<p class=\"has-line-data\" data-line-start=\"215\" data-line-end=\"216\">抽象就是抽出事物的本质特性而暂不考虑其细节 , <strong>软件工程的过程每一步都是对软件解法的抽象层次的一次精化</strong></p>\r\n<h4 class=\"code-line\" data-line-start=217 data-line-end=218 ><a id=\"_217\"></a>逐步求精</h4>\r\n<p class=\"has-line-data\" data-line-start=\"218\" data-line-end=\"219\">为了能集中精力解决主要问题而尽量推迟问题细节的考虑</p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"220\" data-line-end=\"221\">实际上是细化的过程</li>\r\n<li class=\"has-line-data\" data-line-start=\"221\" data-line-end=\"223\">抽象和求精是一对互补的概念</li>\r\n</ul>\r\n<h4 class=\"code-line\" data-line-start=223 data-line-end=224 ><a id=\"_223\"></a>信息隐藏</h4>\r\n<p class=\"has-line-data\" data-line-start=\"224\" data-line-end=\"225\">应该这样设计和确定模块，<strong>使得一个模块内包含的信息（过程和数据)对于不需要这些信息的模块来说，是不能访问的。</strong></p>\r\n<h4 class=\"code-line\" data-line-start=226 data-line-end=227 ><a id=\"_226\"></a>局部化</h4>\r\n<p class=\"has-line-data\" data-line-start=\"227\" data-line-end=\"228\">局部化是指把一些关系密切的软件元素物理地放得彼此靠近。</p>', '软件工程', '2022-12-30 17:36:36', 0);
INSERT INTO `article` VALUES (19, 13, '邓晓枫', '软件工程3', '<h4 class=\"code-line\" data-line-start=229 data-line-end=230 ><a id=\"_229\"></a>模块独立性</h4>\r\n<p class=\"has-line-data\" data-line-start=\"230\" data-line-end=\"231\">模块独立性的重要性：</p>\r\n<ol>\r\n<li class=\"has-line-data\" data-line-start=\"231\" data-line-end=\"232\">有效的模块化的软件比较容易开发</li>\r\n<li class=\"has-line-data\" data-line-start=\"232\" data-line-end=\"234\">独立的模块比较容易测试和维护<br>\r\n模块的独立程度可以由两个定性标准度量：<strong>内聚和耦合</strong></li>\r\n</ol>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"235\" data-line-end=\"238\">耦合\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"236\" data-line-end=\"237\"><strong>耦合</strong>是对一个软件结构内不同模块之间互连程度的度量。耦合强弱取决于模块间接口的复杂程度，进入或访问一个模块的点，以及通过接口的数据。</li>\r\n<li class=\"has-line-data\" data-line-start=\"237\" data-line-end=\"238\">模块耦合分为数据耦合、控制耦合、特征耦合、公共环境耦合和内容耦合.(<strong>尽量使用数据耦合，少用控制耦合和特征耦合，限制公共环境耦合的范围，完全不用内容耦合。</strong>)</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<blockquote>\r\n<blockquote>\r\n<ol>\r\n<li class=\"has-line-data\" data-line-start=\"239\" data-line-end=\"241\">数据耦合<br>\r\n两个模块彼此间通过参数交换信息，而且交换的信息仅仅是数据，那么这种耦合称为数据耦合。<strong>数据耦合是低耦合。</strong></li>\r\n</ol>\r\n</blockquote>\r\n<blockquote>\r\n<ol start=\"2\">\r\n<li class=\"has-line-data\" data-line-start=\"241\" data-line-end=\"243\">控制耦合<br>\r\n<strong>传递的信息中有控制信息</strong>(尽管有时这种控制信息以数据的形式出现)，则这种耦合称为控制耦合。控制耦合是<strong>中等程度的耦合。</strong></li>\r\n</ol>\r\n</blockquote>\r\n<blockquote>\r\n<ol start=\"3\">\r\n<li class=\"has-line-data\" data-line-start=\"243\" data-line-end=\"245\">特征耦合<br>\r\n当把整个数据结构作为参数传递而被调用的模块只需要使用其中一部分数据元素时，就出现了特征耦合。</li>\r\n</ol>\r\n</blockquote>\r\n<blockquote>\r\n<ol start=\"4\">\r\n<li class=\"has-line-data\" data-line-start=\"245\" data-line-end=\"249\">公共环境耦合<br>\r\n当两个或多个模块通过一个公共数据环境相互作用时，它们之间的耦合称为公共环境耦合。<br>\r\n公共环境可以是<strong>全程变量、共享的通信区、内存的公共覆盖区、任何存储介质上的文件、物理设备</strong>等 。<br>\r\n公共环境耦合的复杂程度随耦合的模块个数而变化，当<strong>耦合的模块个数增加时复杂程度显著增加</strong>。</li>\r\n</ol>\r\n</blockquote>\r\n<blockquote>\r\n<ol start=\"5\">\r\n<li class=\"has-line-data\" data-line-start=\"249\" data-line-end=\"256\">内容耦合<br>\r\n最高程度的耦合是内容耦合。如果出现下列情况之一,<br>\r\n两个模块间就发生了内容耦合。<br>\r\n一个模块访问另一个模块的内部数据。<br>\r\n一个模块不通过正常入口而转到另一个模块的内部。两个模块有一部分程序代码重叠（只可能出现在汇编程序中)。<br>\r\n一个模块有多个入口（这意味着一个模块有几种功能)。<br>\r\n<strong>应该坚决避免使用内容耦合。</strong></li>\r\n</ol>\r\n</blockquote>\r\n</blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"257\" data-line-end=\"262\">内聚\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"258\" data-line-end=\"259\"><strong>内聚衡量一个模块内部各个元素彼此结合的紧密程度。</strong></li>\r\n<li class=\"has-line-data\" data-line-start=\"259\" data-line-end=\"260\">内聚标志着一个模块内各个元素彼此结合的紧密程度,它是信息隐藏和局部化概念的自然扩展。简单地说，<strong>理想内聚的模块只做一件事情。</strong></li>\r\n<li class=\"has-line-data\" data-line-start=\"260\" data-line-end=\"261\">内聚和耦合是密切相关的，<strong>模块内的高内聚往往意味着模块间的松耦合。</strong></li>\r\n<li class=\"has-line-data\" data-line-start=\"261\" data-line-end=\"262\">内聚分为三大类低内聚、中内聚和高内聚</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<blockquote>\r\n<blockquote>\r\n<ol>\r\n<li class=\"has-line-data\" data-line-start=\"263\" data-line-end=\"266\">低内聚<br>\r\n- <strong>偶然内聚</strong><br>\r\n一个模块完成一组任务，这些任务彼此及时有关系，关系也是很松散的，就叫做<strong>偶然内聚</strong></li>\r\n</ol>\r\n</blockquote>\r\n</blockquote>\r\n<blockquote>\r\n<blockquote></blockquote>\r\n</blockquote>\r\n<pre><code>   - **逻辑内聚**   \r\n</code></pre>\r\n<p class=\"has-line-data\" data-line-start=\"268\" data-line-end=\"269\">一个模块完成的任务在逻辑上属于相同或者相似的一类成为<strong>逻辑内聚</strong></p>\r\n<blockquote>\r\n<blockquote></blockquote>\r\n</blockquote>\r\n<pre><code>   - **时间内聚**  \r\n</code></pre>\r\n<p class=\"has-line-data\" data-line-start=\"271\" data-line-end=\"272\">一个模块包含的任务必须在同一段时间内执行，就叫<strong>时间内聚</strong></p>\r\n<blockquote>\r\n<blockquote>\r\n<ol start=\"2\">\r\n<li class=\"has-line-data\" data-line-start=\"272\" data-line-end=\"275\">中内聚<br>\r\n- <strong>过程内聚</strong><br>\r\n一个模块内的处理元素是相关的，并且必须以特定次序执行，则称为<strong>过程内聚</strong></li>\r\n</ol>\r\n</blockquote>\r\n</blockquote>\r\n<blockquote>\r\n<blockquote></blockquote>\r\n</blockquote>\r\n<pre><code>   - **通信内聚**    \r\n</code></pre>\r\n<p class=\"has-line-data\" data-line-start=\"277\" data-line-end=\"278\">模块中所有元素都是用同一个输入数据和(或）产生同一个输出数据，叫做<strong>通信内聚</strong></p>\r\n<blockquote>\r\n<blockquote>\r\n<ol start=\"3\">\r\n<li class=\"has-line-data\" data-line-start=\"278\" data-line-end=\"281\">高内聚<br>\r\n- <strong>顺序内聚</strong><br>\r\n一个模块内的处理数据和同一个功能相关，并且这些处理必须顺序执行，称为<strong>顺序内聚</strong></li>\r\n</ol>\r\n</blockquote>\r\n</blockquote>\r\n<blockquote>\r\n<blockquote></blockquote>\r\n</blockquote>\r\n<pre><code>   - **功能内聚**  \r\n</code></pre>\r\n<p class=\"has-line-data\" data-line-start=\"283\" data-line-end=\"284\">功能内聚在一个模块中</p>', '软件工程', '2023-12-30 17:37:02', 0);
INSERT INTO `article` VALUES (20, 13, '邓晓枫', '软件工程4', '<h3 class=\"code-line\" data-line-start=285 data-line-end=286 ><a id=\"_285\"></a>启发规则</h3>\r\n<p class=\"has-line-data\" data-line-start=\"286\" data-line-end=\"288\"><strong>1. 改进软件结构提高模块独立性</strong><br>\r\n设计出软件的初步结构以后，应该审查分析这个结构，通过模块分解或合并，力求<strong>降低耦合</strong>提高内聚。</p>\r\n<p class=\"has-line-data\" data-line-start=\"289\" data-line-end=\"291\"><strong>2. 模块规模应该适中</strong><br>\r\n一个模块的规模不应过大，最好能写在一页纸内（通常不超过60行语句)</p>\r\n<p class=\"has-line-data\" data-line-start=\"292\" data-line-end=\"293\"><strong>3. 深度、宽度、扇出和扇入都应适当</strong></p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"294\" data-line-end=\"295\">深度：软件结构中控制的层数（5以内）</li>\r\n<li class=\"has-line-data\" data-line-start=\"295\" data-line-end=\"296\">宽度：软件结构内同一个层次上的模块总数的最大值</li>\r\n<li class=\"has-line-data\" data-line-start=\"296\" data-line-end=\"297\">扇出：一个模块直接控制（调用)的模块数目（3~9）</li>\r\n<li class=\"has-line-data\" data-line-start=\"297\" data-line-end=\"299\">扇入：一个模块被多少个上级模块直接调用（越多越好)</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"299\" data-line-end=\"300\"><strong>4. 模块的作用域应该在控制域之内</strong></p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"301\" data-line-end=\"302\">作用域：受该模块内一个判定影响的所有模块的集合。</li>\r\n<li class=\"has-line-data\" data-line-start=\"302\" data-line-end=\"304\">控制域：模块本身以及所有直接或间接从属于它的模块的集合。</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"304\" data-line-end=\"306\"><strong>5. 力争降低模块接口的复杂程度</strong><br>\r\n模块<strong>接口复杂</strong>是<strong>软件发生错误</strong>的一个<strong>主要原因</strong>。应该仔细设计模块接口，使得信息传递简单并且和模块的功能一致。</p>\r\n<p class=\"has-line-data\" data-line-start=\"307\" data-line-end=\"309\"><strong>6. 设计单入口单出口的模块</strong><br>\r\n这条启发式规则警告软件工程师<strong>不要</strong>使模块间出现<strong>内容耦合</strong>。当从顶部进入模块并且从底部退出来时，软件是比较容易理解的，因此也是比较容易维护的。</p>\r\n<p class=\"has-line-data\" data-line-start=\"310\" data-line-end=\"312\"><strong>7. 模块功能应该可以预测</strong><br>\r\n模块的功能应该能够预测，但也要防止模块功能过分局限。</p>\r\n<h3 class=\"code-line\" data-line-start=313 data-line-end=314 ><a id=\"_313\"></a>面向数据流的设计方法</h3>\r\n<p class=\"has-line-data\" data-line-start=\"314\" data-line-end=\"316\"><strong>概念</strong><br>\r\n面向数据流的设计方法<strong>把信息流映射成软件结构</strong>,信息流的类型决定了映射的方法，信息流有下述两种类型：</p>\r\n<p class=\"has-line-data\" data-line-start=\"317\" data-line-end=\"320\"><strong>1. 变换流</strong><br>\r\n信息（外部信息） －进入－ &gt;  系统 - 变为内部信息－&gt; 变换中心 － 变换 － &gt; 系统 - 变换为外部信息 －&gt;外界<br>\r\n当数据流图具有以上特征的信息流就叫做交换流</p>\r\n<p class=\"has-line-data\" data-line-start=\"321\" data-line-end=\"324\"><strong>2. 事物流</strong><br>\r\n信息 （外部信息） －进入－&gt; 事务中心      －－－在多个中选择一个执行 －&gt;输出信息<br>\r\n有此特征的称为事物流图， 即信息进入后通过事务中心在多个动作序列中选择一个来执行。这个行为称为事物流</p>\r\n<p class=\"has-line-data\" data-line-start=\"325\" data-line-end=\"327\">###变换分析<br>\r\n变换分析是一系列设计步骤的总称，经过这些步骤把具有变换流特点的数据流图按预先确定的秘密是映射为软件结构</p>\r\n<p class=\"has-line-data\" data-line-start=\"328\" data-line-end=\"329\"><strong>设计步骤</strong></p>\r\n<ol>\r\n<li class=\"has-line-data\" data-line-start=\"329\" data-line-end=\"331\">\r\n<p class=\"has-line-data\" data-line-start=\"329\" data-line-end=\"330\">复查基本系统模型</p>\r\n</li>\r\n<li class=\"has-line-data\" data-line-start=\"331\" data-line-end=\"333\">\r\n<p class=\"has-line-data\" data-line-start=\"331\" data-line-end=\"332\">复查并细化数据流图</p>\r\n</li>\r\n<li class=\"has-line-data\" data-line-start=\"333\" data-line-end=\"335\">\r\n<p class=\"has-line-data\" data-line-start=\"333\" data-line-end=\"334\">确定数据流图具有变换特征还是事物特征</p>\r\n</li>\r\n<li class=\"has-line-data\" data-line-start=\"335\" data-line-end=\"337\">\r\n<p class=\"has-line-data\" data-line-start=\"335\" data-line-end=\"336\">确定输入流和输出流的边界，从而孤立出变换中心</p>\r\n</li>\r\n<li class=\"has-line-data\" data-line-start=\"337\" data-line-end=\"340\">\r\n<p class=\"has-line-data\" data-line-start=\"337\" data-line-end=\"340\"><strong>第一级分解</strong><br>\r\n软件结构代表对控制的自顶向下的分配，所谓分解就是分配控制的过程。对于变换流的情况，数据流图被映射成一个特殊的软件结构，这个结构控制输入、变换和输出等信息处理过程。<br>\r\n位于软件结构最顶层的控制模块Cm协调下述从属的控制功能。</p>\r\n</li>\r\n</ol>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"341\" data-line-end=\"342\"><strong>输入信息</strong>处理<strong>控制</strong>模块Ca，协调对所有输入数据的接收。</li>\r\n<li class=\"has-line-data\" data-line-start=\"342\" data-line-end=\"343\"><strong>变换</strong>中心<strong>控制</strong>模块Ct，管理对内部形式的数据的所有操作。</li>\r\n<li class=\"has-line-data\" data-line-start=\"343\" data-line-end=\"345\"><strong>输出</strong>信息处理<strong>控制</strong>模块Ce，协调输出信息的产生过程。</li>\r\n</ul>\r\n<ol start=\"6\">\r\n<li class=\"has-line-data\" data-line-start=\"345\" data-line-end=\"350\">\r\n<p class=\"has-line-data\" data-line-start=\"345\" data-line-end=\"349\"><strong>第二级分解</strong><br>\r\n第二级分解就是把数据流图中的<strong>每个处理映射</strong>成软件结构中一个<strong>适当的模块</strong>。<br>\r\n完成第二级分解的方法是，从变换中心的边界开始逆着输入通路向外移动，把输入通路中每个处理映射成软件结构中Ca控制下的一个低层模块；然后沿输出通路向外移动，把输出通路中每个处理映射成直接或间接受模块Ce控制的一个低层模块；最后把变换中心内的每个处理映射成受Ct控制的一个模块。<br>\r\n** 同时应该为每个模块写一个简要说明**</p>\r\n</li>\r\n<li class=\"has-line-data\" data-line-start=\"350\" data-line-end=\"352\">\r\n<p class=\"has-line-data\" data-line-start=\"350\" data-line-end=\"351\">使用设计度量和启发式规则对第一次分割得到的软件结构进行进一步精化</p>\r\n</li>\r\n</ol>\r\n<h4 class=\"code-line\" data-line-start=352 data-line-end=353 ><a id=\"_352\"></a>事物分析</h4>\r\n<p class=\"has-line-data\" data-line-start=\"353\" data-line-end=\"355\">数据流图具有<strong>明显的事物特点</strong>时采用的<strong>事务分析</strong>方法<br>\r\n其和变换分析主要区别在于软件结构的映射方法不同，事务流映射成的软件包含一个接收分支和一个发送分支</p>\r\n<h4 class=\"code-line\" data-line-start=356 data-line-end=357 ><a id=\"_356\"></a>设计优化</h4>\r\n<p class=\"has-line-data\" data-line-start=\"357\" data-line-end=\"358\">用下述方法对<strong>时间起决定性作用</strong>的软件进行优化.</p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"359\" data-line-end=\"360\">在不考虑时间因素的前提下开发并精化软件结构。</li>\r\n<li class=\"has-line-data\" data-line-start=\"360\" data-line-end=\"361\">在详细设计阶段选出最耗费时间的那些模块，仔细地设计它们的处理过程（算法），以求提高效率。</li>\r\n<li class=\"has-line-data\" data-line-start=\"361\" data-line-end=\"362\">使用高级程序设计语言编写程序。</li>\r\n<li class=\"has-line-data\" data-line-start=\"362\" data-line-end=\"363\">在软件中孤立出那些大量占用处理机资源的模块。</li>\r\n<li class=\"has-line-data\" data-line-start=\"363\" data-line-end=\"365\">必要时重新设计或用依赖于机器的语言重写上述大量占用资源的模块的代码，以求提高效率。</li>\r\n</ul>\r\n<h2 class=\"code-line\" data-line-start=365 data-line-end=366 ><a id=\"_365\"></a>详细设计</h2>\r\n<p class=\"has-line-data\" data-line-start=\"366\" data-line-end=\"367\"><strong>根本目标</strong>：确定该怎样具体地实现所需要的系统。</p>', '软件工程', '2021-12-30 17:37:25', 0);
INSERT INTO `article` VALUES (21, 13, '邓晓枫', '软件工程5', '<h3 class=\"code-line\" data-line-start=367 data-line-end=368 ><a id=\"61_367\"></a>6.1结构程序设计</h3>\r\n<p class=\"has-line-data\" data-line-start=\"368\" data-line-end=\"369\">结构程序设计<strong>经典定义</strong>：如果一个程序的代码块仅仅通过顺序、选择和循环这3种基本控制结构进行连接，并且每个代码块只有一个入口和一个出口，则称这个程序是结构化的。</p>\r\n<h3 class=\"code-line\" data-line-start=370 data-line-end=371 ><a id=\"62__370\"></a>6.2 人机界面设计</h3>\r\n<p class=\"has-line-data\" data-line-start=\"371\" data-line-end=\"373\">人机界面是接口的设计的一个重要组成部分，所占比例越来越大，个别系统甚至占50%<br>\r\n<strong>设计问题</strong></p>\r\n<ol>\r\n<li class=\"has-line-data\" data-line-start=\"373\" data-line-end=\"374\">系统响应时间</li>\r\n<li class=\"has-line-data\" data-line-start=\"374\" data-line-end=\"375\">用户帮助设施</li>\r\n<li class=\"has-line-data\" data-line-start=\"375\" data-line-end=\"376\">出错信息处理</li>\r\n<li class=\"has-line-data\" data-line-start=\"376\" data-line-end=\"378\">命令交互</li>\r\n</ol>\r\n<p class=\"has-line-data\" data-line-start=\"378\" data-line-end=\"380\"><strong>系统响应时间</strong><br>\r\n用户完成控制动作到软件做出预期的响应的时间</p>\r\n<blockquote></blockquote>\r\n<p class=\"has-line-data\" data-line-start=\"382\" data-line-end=\"383\">其中的两个重要属性:</p>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"383\" data-line-end=\"384\"><strong>长度</strong>：时间过长用户紧张，时间过短用户可能因为操作过快犯错</li>\r\n<li class=\"has-line-data\" data-line-start=\"384\" data-line-end=\"386\"><strong>易变性</strong>：系统响应时间相对于平均响应时间变差，即使系统响应时间较长，<strong>响应时间易变形低</strong>也<strong>有助于</strong>用户建立起<strong>稳定的工作节奏</strong>，<strong>即我们要保证响应时间比较平均让客户认为没有问题</strong></li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"386\" data-line-end=\"389\"><strong>用户帮助设施</strong><br>\r\n常见的帮助设施可分为<strong>集成的</strong>和<strong>附加的</strong>两类<br>\r\n具体设计帮助设施时，必须解决</p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"390\" data-line-end=\"391\">在用户与系统交互期间，是否在任何时候都能获得关于系统任何功能的帮助信息？有两种选择：<strong>提供部分功能的帮助信息和提供全部功能的帮助信息</strong>。</li>\r\n<li class=\"has-line-data\" data-line-start=\"391\" data-line-end=\"392\">用户怎样请求帮助？有3种选择：<strong>帮助菜单，特殊功能键和HELP命令</strong>。</li>\r\n<li class=\"has-line-data\" data-line-start=\"392\" data-line-end=\"393\">怎样显示帮助信息？有3种选择：在<strong>独立的窗口</strong>中，指出参考某个<strong>文档</strong>（不理想）和在<strong>屏幕固定位置</strong>显示简短提示。</li>\r\n<li class=\"has-line-data\" data-line-start=\"393\" data-line-end=\"394\">用户怎样返回到正常的交互方式中？有两种选择：屏幕上的<strong>返回按钮和功能键</strong>。</li>\r\n<li class=\"has-line-data\" data-line-start=\"394\" data-line-end=\"396\">怎样组织帮助信息？有3种选择：<strong>平面结构，信息的层次结构和超文本结构</strong>。</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"396\" data-line-end=\"398\"><strong>出错信息处理</strong><br>\r\n出错信息和警告信息，是出现问题时系统给出的消息，一般应该有以下属性：</p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"399\" data-line-end=\"400\">用用户可以理解的属于是<strong>描述问题</strong></li>\r\n<li class=\"has-line-data\" data-line-start=\"400\" data-line-end=\"402\">提供有助于从错误中<strong>恢复</strong>的建设性<strong>意见</strong></li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"402\" data-line-end=\"405\"><strong>命令交互</strong><br>\r\n许多高级用户仍然偏爱面向命令行的交互方式<br>\r\n在提供命令交互方式时，必须考虑下列设计问题。</p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"406\" data-line-end=\"407\">是否每个菜单选项都有对应的命令？</li>\r\n<li class=\"has-line-data\" data-line-start=\"407\" data-line-end=\"408\">采用何种命令形式？有3种选择：控制序列(组合键，例如，Ctrl+P)，功能键（如F1）和输入命令。</li>\r\n<li class=\"has-line-data\" data-line-start=\"408\" data-line-end=\"409\">学习和记忆命令的难度有多大？忘记了命令怎么办？</li>\r\n<li class=\"has-line-data\" data-line-start=\"409\" data-line-end=\"411\">用户是否可以定制或缩写命令？</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"411\" data-line-end=\"413\">在越来越多的应用软件中，人机界面设计者都提供了“命令宏机制”。<br>\r\n在理想的情况下，所有应用软件都有一致的命令使用方法。</p>\r\n<p class=\"has-line-data\" data-line-start=\"414\" data-line-end=\"415\"><strong>设计过程</strong></p>\r\n<blockquote></blockquote>\r\n<ol>\r\n<li class=\"has-line-data\" data-line-start=\"416\" data-line-end=\"417\">一般交互指南：涉及信息显示、数据输入和系统整体控制</li>\r\n</ol>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"418\" data-line-end=\"419\">保持一致性。</li>\r\n<li class=\"has-line-data\" data-line-start=\"419\" data-line-end=\"420\">提供有意义的反馈。</li>\r\n<li class=\"has-line-data\" data-line-start=\"420\" data-line-end=\"421\">在执行有较大破坏性的动作之前要求用户确认。</li>\r\n<li class=\"has-line-data\" data-line-start=\"421\" data-line-end=\"422\">允许取消绝大多数操作。</li>\r\n<li class=\"has-line-data\" data-line-start=\"422\" data-line-end=\"423\">减少在两次操作之间必须记忆的信息量。</li>\r\n<li class=\"has-line-data\" data-line-start=\"423\" data-line-end=\"424\">提高对话、移动和思考的效率。</li>\r\n<li class=\"has-line-data\" data-line-start=\"424\" data-line-end=\"425\">允许犯错误。</li>\r\n<li class=\"has-line-data\" data-line-start=\"425\" data-line-end=\"426\">按功能对动作分类，并据此设计屏幕布局。提供对用户工作内容敏感的帮助设施。用简单动词或动词短语作为命令名。</li>\r\n</ul>\r\n<blockquote></blockquote>\r\n<ol start=\"2\">\r\n<li class=\"has-line-data\" data-line-start=\"427\" data-line-end=\"428\">信息显示指南：多种不同方式“显示”信息：用文字、图形和声音；按位置、移动和大小；使用颜色、分辨率和省略。</li>\r\n</ol>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"428\" data-line-end=\"429\">只显示与当前工作内容有关的信息。</li>\r\n<li class=\"has-line-data\" data-line-start=\"429\" data-line-end=\"430\">不要用数据淹没用户，应该用便于用户迅速吸取信息的方式来表示数据。</li>\r\n<li class=\"has-line-data\" data-line-start=\"430\" data-line-end=\"431\">使用一致的标记、标准的缩写和可预知的颜色。</li>\r\n<li class=\"has-line-data\" data-line-start=\"431\" data-line-end=\"432\">允许用户保持可视化的语境。</li>\r\n<li class=\"has-line-data\" data-line-start=\"432\" data-line-end=\"433\">产生有意义的出错信息。</li>\r\n<li class=\"has-line-data\" data-line-start=\"433\" data-line-end=\"434\">使用大小写、缩进和文本分组以帮助理解。</li>\r\n<li class=\"has-line-data\" data-line-start=\"434\" data-line-end=\"435\">使用窗口分隔不同类型的信息。</li>\r\n<li class=\"has-line-data\" data-line-start=\"435\" data-line-end=\"436\">使用“模拟”显示方式表示信息，以使信息更容易被用户提取。</li>\r\n<li class=\"has-line-data\" data-line-start=\"436\" data-line-end=\"437\">高效率地使用显示屏。</li>\r\n</ul>\r\n<blockquote></blockquote>\r\n<ol start=\"3\">\r\n<li class=\"has-line-data\" data-line-start=\"438\" data-line-end=\"439\">数据输入指南：用户的大部分时间用在选择命令、输入数</li>\r\n</ol>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"439\" data-line-end=\"440\">据和向系统提供输入。</li>\r\n<li class=\"has-line-data\" data-line-start=\"440\" data-line-end=\"441\">尽量减少用户的输入动作。</li>\r\n<li class=\"has-line-data\" data-line-start=\"441\" data-line-end=\"442\">保持信息显示和数据输入之间的一致性。</li>\r\n<li class=\"has-line-data\" data-line-start=\"442\" data-line-end=\"443\">允许用户自定义输入。</li>\r\n<li class=\"has-line-data\" data-line-start=\"443\" data-line-end=\"444\">交互应该是灵活的，并且可调整成用户最喜欢的输入方式。</li>\r\n<li class=\"has-line-data\" data-line-start=\"444\" data-line-end=\"445\">使在当前动作语境中不适用的命令不起作用。</li>\r\n<li class=\"has-line-data\" data-line-start=\"445\" data-line-end=\"446\">让用户控制交互流。</li>\r\n<li class=\"has-line-data\" data-line-start=\"446\" data-line-end=\"447\">对所有输入动作都提供帮助。</li>\r\n<li class=\"has-line-data\" data-line-start=\"447\" data-line-end=\"449\">消除冗余的输入。</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"449\" data-line-end=\"451\">###面向数据结构的设计方法<br>\r\n<img src=\"https://p.sda1.dev/19/d08001f0b28a76868c19d530a91974c9/1000080405.jpg\" alt=\"1000080405.jpg\"></p>\r\n<p class=\"has-line-data\" data-line-start=\"452\" data-line-end=\"454\">Jackson结构程序设计方法基本上由下述5个步骤组成。<br>\r\n1.分析并确定输入数据和输出数据的逻辑结构，并用Jackson图描绘这些数据结构</p>\r\n<ol start=\"2\">\r\n<li class=\"has-line-data\" data-line-start=\"454\" data-line-end=\"455\">找出输入数据结构和输出数据结构中有对应关系的数据单元。</li>\r\n<li class=\"has-line-data\" data-line-start=\"455\" data-line-end=\"457\">用下述3条规则从描绘数据结构的Jackson图导出描绘程序<br>\r\n结构的Jackson图。</li>\r\n</ol>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"458\" data-line-end=\"459\">为每对有对应关系的数据单元，按照它们在数据结构图中的层次在程序结构图的相应层次画一个处理框。</li>\r\n<li class=\"has-line-data\" data-line-start=\"459\" data-line-end=\"460\">根据输入数据结构中剩余的每个数据单元所处的层次，在程序结构图的相应层次分别为它们画上对应的处理框。</li>\r\n<li class=\"has-line-data\" data-line-start=\"460\" data-line-end=\"461\">根据输出数据结构中剩余的每个数据单元所处的层次，在程序结构图的相应层次分别为它们画上对应的处理框。</li>\r\n<li class=\"has-line-data\" data-line-start=\"461\" data-line-end=\"462\">列出所有操作和条件（包括分支条件和循环结束条件)，并且把它们分配到程序结构图的适当位置。</li>\r\n<li class=\"has-line-data\" data-line-start=\"462\" data-line-end=\"463\">用伪码表示程序。Jackson方法中使用的伪码和Jackson图是完全对应的</li>\r\n</ul>\r\n<h2 class=\"code-line\" data-line-start=466 data-line-end=467 ><a id=\"_466\"></a>实现</h2>\r\n<h3 class=\"code-line\" data-line-start=467 data-line-end=468 ><a id=\"_467\"></a>编码</h3>\r\n<p class=\"has-line-data\" data-line-start=\"468\" data-line-end=\"470\"><strong>选择程序设计语言</strong><br>\r\n高级语言优于汇编语言</p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"471\" data-line-end=\"472\">汇编语言编码需要把软件设计翻译成机器操作的序列，既困难又容易出差错;</li>\r\n<li class=\"has-line-data\" data-line-start=\"472\" data-line-end=\"473\">高级语言写程序比用汇编语言写程序生产率可以提高好几倍;</li>\r\n<li class=\"has-line-data\" data-line-start=\"473\" data-line-end=\"475\">用高级语言写的程序容易阅读、容易测试、容易调试、容易维护。</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"475\" data-line-end=\"476\"><strong>理想标准</strong></p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"477\" data-line-end=\"478\">汇编语言编码需要把软件设计翻译成机器操作的序列，既困难又容易出差错;</li>\r\n<li class=\"has-line-data\" data-line-start=\"478\" data-line-end=\"479\">高级语言写程序比用汇编语言写程序生产率可以提高好几倍;</li>\r\n<li class=\"has-line-data\" data-line-start=\"479\" data-line-end=\"481\">用高级语言写的程序容易阅读、容易测试、容易调试、容易维护。</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"481\" data-line-end=\"482\"><strong>实际标准</strong></p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"483\" data-line-end=\"484\">应该有理想的模块化机制.</li>\r\n<li class=\"has-line-data\" data-line-start=\"484\" data-line-end=\"485\">以及可读性好的控制结构和数据结构;</li>\r\n<li class=\"has-line-data\" data-line-start=\"485\" data-line-end=\"486\">使编译程序能够尽可能多</li>\r\n<li class=\"has-line-data\" data-line-start=\"486\" data-line-end=\"487\">地发现程序中的错误;</li>\r\n<li class=\"has-line-data\" data-line-start=\"487\" data-line-end=\"489\">应该有良好的独立编译机制。</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"489\" data-line-end=\"491\"><strong>编码风格</strong><br>\r\n源程序代码的逻辑简明清晰，易读懂是好程序的重要标准，为了做到这点，应该遵循</p>\r\n<p class=\"has-line-data\" data-line-start=\"492\" data-line-end=\"494\"><strong>程序内部的文档</strong><br>\r\n程序内部文档包括恰当的标识符，适当的注解和程序视觉组织等</p>\r\n<p class=\"has-line-data\" data-line-start=\"495\" data-line-end=\"496\"><strong>数据说明</strong></p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"497\" data-line-end=\"498\">数据说明的次序应该标准化;</li>\r\n<li class=\"has-line-data\" data-line-start=\"498\" data-line-end=\"499\">当多个变量名在一个语句中说明时，应该按字母顺序排列这些变量;</li>\r\n<li class=\"has-line-data\" data-line-start=\"499\" data-line-end=\"501\">如果设计时使用了一个复杂的数据结构，则应该用注解说明用程序设计语言实现这个数据结构的方法和特点。</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"501\" data-line-end=\"502\"><strong>语句构造</strong>（尽量<strong>简单而直接</strong>)</p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"503\" data-line-end=\"504\">数据说明的<strong>次序</strong>应该标准化;</li>\r\n<li class=\"has-line-data\" data-line-start=\"504\" data-line-end=\"505\">当多个变量名在一个语句中说明时，应该<strong>按字母顺序排列这些变量</strong>;</li>\r\n<li class=\"has-line-data\" data-line-start=\"505\" data-line-end=\"507\">如果设计时使用了一个复杂的数据结构，则应该用注解说明用程序设计语言实现这个数据结构的方法和特点。</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"507\" data-line-end=\"510\">####软件测试<br>\r\n测试的定义：为了发现程序中的错误而执行程序的过程<br>\r\n<strong>测试绝不能证明程序是正确的</strong></p>\r\n<p class=\"has-line-data\" data-line-start=\"511\" data-line-end=\"512\"><strong>测试准则</strong></p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"513\" data-line-end=\"514\">所有测试都应该能追溯到用户需求。</li>\r\n<li class=\"has-line-data\" data-line-start=\"514\" data-line-end=\"515\">应该远在测试开始之前就指定出测试计划。</li>\r\n<li class=\"has-line-data\" data-line-start=\"515\" data-line-end=\"516\">把Pareto远离应用到应用测试中。</li>\r\n<li class=\"has-line-data\" data-line-start=\"516\" data-line-end=\"517\">应从“小规模”测试开始，并逐步进行“大规模测试”。</li>\r\n<li class=\"has-line-data\" data-line-start=\"517\" data-line-end=\"518\">穷举测试是不可能的。</li>\r\n<li class=\"has-line-data\" data-line-start=\"518\" data-line-end=\"520\">为达到最佳测试效果，应由独立的第三方从事测试工作。</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"520\" data-line-end=\"521\">白盒测试（结构测试）：按照程序内部的逻辑测试程序，检测程序中的主要执行通路是否都能按预定要求正确工作。<strong>用户只能做黑盒测试</strong></p>\r\n<p class=\"has-line-data\" data-line-start=\"522\" data-line-end=\"523\">测试步骤：模块测试、子系统测试、系统测试、验收测试、平行运行。（五个步骤）</p>\r\n<ol>\r\n<li class=\"has-line-data\" data-line-start=\"524\" data-line-end=\"527\">', '软件工程', '2021-12-30 17:38:26', 0);
INSERT INTO `article` VALUES (22, 13, '邓晓枫', '软件工程6', '<p class=\"has-line-data\" data-line-start=\"524\" data-line-end=\"526\"><strong>模块测试</strong><br>\r\n模块测试的目的是保证每个模块能正确运行，所以又称为<strong>单元测试，在这个测试步骤中锁发现的旺旺是编码和详细设计的错误</strong></p>\r\n</li>\r\n<li class=\"has-line-data\" data-line-start=\"527\" data-line-end=\"530\">\r\n<p class=\"has-line-data\" data-line-start=\"527\" data-line-end=\"529\"><strong>子系统测试</strong><br>\r\n经过单元测试的模块放一起形成的子系统来测试，主要测试模块见通信和协调，<strong>这个步骤着重测试模块的接口</strong></p>\r\n</li>\r\n<li class=\"has-line-data\" data-line-start=\"530\" data-line-end=\"533\">\r\n<p class=\"has-line-data\" data-line-start=\"530\" data-line-end=\"532\"><strong>系统测试</strong><br>\r\n将经过测试的子系统装配为完整系统进行测试，在这里不仅要发现设计和编码的错误，同时还要<strong>验证系统确实能提供需求说明书中指定的功能,在这个测试步骤中发现的往往是软件设计中的错误，也可能发现需求说明中的错误</strong></p>\r\n</li>\r\n<li class=\"has-line-data\" data-line-start=\"533\" data-line-end=\"536\">\r\n<p class=\"has-line-data\" data-line-start=\"533\" data-line-end=\"535\"><strong>验收测试</strong><br>\r\n把系统作为单一的实体进行测试，测试内容和系统测试差不多，但是是和<strong>用户</strong>积极参与下进行。<strong>这个步骤主要是发现需求说明书中的错误</strong>也称为<strong>确认测试</strong></p>\r\n</li>\r\n<li class=\"has-line-data\" data-line-start=\"536\" data-line-end=\"538\">\r\n<p class=\"has-line-data\" data-line-start=\"536\" data-line-end=\"538\"><strong>平行测试</strong><br>\r\n主要是在更新换代的时候对比新旧系统的处理结果，主要有以下几点</p>\r\n</li>\r\n</ol>\r\n<blockquote></blockquote>\r\n<ol>\r\n<li class=\"has-line-data\" data-line-start=\"539\" data-line-end=\"540\">可以在准生产环境中运行新系统而又不冒风险。</li>\r\n<li class=\"has-line-data\" data-line-start=\"540\" data-line-end=\"541\">用户能有一段熟悉新系统的时间。</li>\r\n<li class=\"has-line-data\" data-line-start=\"541\" data-line-end=\"542\">可以验证用户指南和使用手册之类的文档。</li>\r\n<li class=\"has-line-data\" data-line-start=\"542\" data-line-end=\"544\">能够以准生产模式对新系统进行全负荷测试，可以用测试结果验证性能指标。</li>\r\n</ol>\r\n<p class=\"has-line-data\" data-line-start=\"544\" data-line-end=\"546\">测试阶段的信息流<br>\r\n<img src=\"https://p.sda1.dev/19/6e3b98f1093810eb6db091ad2dfca00f/1000086111.jpg\" alt=\"1000086111.jpg\"></p>\r\n<p class=\"has-line-data\" data-line-start=\"547\" data-line-end=\"550\"><strong>测试方案</strong>不仅仅是测试时使用的<strong>输入数据</strong>（称为测试用例)，还应该包括每组输入数据<strong>预定要检验的功能</strong>，以及每组输入数据<strong>预期</strong>应该得到的<strong>正确输出</strong>。<br>\r\n测试配置是软件配置的一个子集，<strong>最终交出的软件配置应该包括上述测试配置以及测试的实际结果和调试的记录.</strong><br>\r\n比较测试得出的实际结果和预期的结果，如果两者不一致则很可能是程序中有错误。</p>\r\n<p class=\"has-line-data\" data-line-start=\"551\" data-line-end=\"552\"><strong>测试重点</strong></p>\r\n<blockquote></blockquote>\r\n<ol>\r\n<li class=\"has-line-data\" data-line-start=\"553\" data-line-end=\"554\"><strong>模块接口</strong></li>\r\n</ol>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"554\" data-line-end=\"555\">参数的数目、次序、属性或单位系统与变量是否一致;</li>\r\n<li class=\"has-line-data\" data-line-start=\"555\" data-line-end=\"556\">是否修改了只作输入用的变量;</li>\r\n<li class=\"has-line-data\" data-line-start=\"556\" data-line-end=\"557\">全局变量的定义和用法在各个模块中是否一致</li>\r\n</ul>\r\n<blockquote></blockquote>\r\n<ol start=\"2\">\r\n<li class=\"has-line-data\" data-line-start=\"558\" data-line-end=\"560\"><strong>局部数据结构</strong><br>\r\n局部数据结构是常见的错误来源。应该仔细设计测试方案，以便发现局部数据说明、初始化、默认值等方面的错误。</li>\r\n</ol>\r\n<blockquote></blockquote>\r\n<ol start=\"3\">\r\n<li class=\"has-line-data\" data-line-start=\"561\" data-line-end=\"563\"><strong>重要的执行通路</strong><br>\r\n由于<strong>通常不可能进行穷尽测试</strong>，因此，在单元测试期间选择<strong>最有代表性、最可能发现错误</strong>的执行通路进行测试是十分关键的。应该设计测试方案用来发现由于错误的计算、不正确的比较或不适当的控制流而造成的错误。</li>\r\n</ol>\r\n<blockquote></blockquote>\r\n<ol start=\"4\">\r\n<li class=\"has-line-data\" data-line-start=\"564\" data-line-end=\"571\"><strong>出错处理通路</strong><br>\r\n即出错处理，不仅应该包含处理，还应该认真测试这种通路，应该着重测试下面可能发现的错误\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"566\" data-line-end=\"567\">对错误的描述是难以理解的;</li>\r\n<li class=\"has-line-data\" data-line-start=\"567\" data-line-end=\"568\">记下的错误与实际遇到的错误不同;</li>\r\n<li class=\"has-line-data\" data-line-start=\"568\" data-line-end=\"569\">在对错误进行处理之前，错误条件已经引起系统干预;</li>\r\n<li class=\"has-line-data\" data-line-start=\"569\" data-line-end=\"570\">对错误的处理不正确;</li>\r\n<li class=\"has-line-data\" data-line-start=\"570\" data-line-end=\"571\">描述错误的信息不足以帮助确定造成错误的位置。</li>\r\n</ul>\r\n</li>\r\n</ol>\r\n<blockquote></blockquote>\r\n<ol start=\"5\">\r\n<li class=\"has-line-data\" data-line-start=\"572\" data-line-end=\"573\"><strong>边界条件</strong></li>\r\n</ol>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"573\" data-line-end=\"574\">边界测试是单元测试中最后的也可能是最重要的任务。</li>\r\n<li class=\"has-line-data\" data-line-start=\"574\" data-line-end=\"575\">软件常常在它的边界上失效，例如，处理n元数组的第n个元素时，或做到i次循环中的第i次重复时，往往会发生错误。</li>\r\n<li class=\"has-line-data\" data-line-start=\"575\" data-line-end=\"577\">使用刚好小于、刚好等于和刚好大于最大值或最小值的数据结构、控制量和数据值的测试方案，非常可能发现软件中的错误。</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"577\" data-line-end=\"579\"><strong>代码审查</strong><br>\r\n一般是由审查小组正式进行人工测试，能检查出30%-70%的设计错误和编码错误，最好由<strong>组长（有能力有经验且最好没参与的），程序设计者，程序编写者，程序测试者</strong>组成</p>\r\n<h3 class=\"code-line\" data-line-start=580 data-line-end=581 ><a id=\"_580\"></a>集成测试</h3>\r\n<p class=\"has-line-data\" data-line-start=\"581\" data-line-end=\"584\"><strong>非渐进式测试</strong>：小模块单元测试，然后总体测试<br>\r\n<strong>渐进式测试</strong>：小模块单元测试，然后一步一步添加模块进行测试<br>\r\n渐进式测试有两种策略：<strong>自顶向下和自底向上测试</strong></p>\r\n<p class=\"has-line-data\" data-line-start=\"585\" data-line-end=\"587\"><strong>自顶向下测试</strong><br>\r\n由主控模块开始沿着控制层向下移动，并且逐渐讲各个模块结合起来，在组合模块时，存在深度优先或者宽度优先策略</p>\r\n<p class=\"has-line-data\" data-line-start=\"588\" data-line-end=\"589\">模块结合进软件结构的具体过程由下述4个步骤完成：</p>\r\n<blockquote></blockquote>\r\n<p class=\"has-line-data\" data-line-start=\"590\" data-line-end=\"595\">①对主控制模块进行测试，测试时用存根程序代替所有直接附属于主控制模块的模块;<br>\r\n②根据选定的结合策略(深度优先或宽度优先），每次用一个实际模块代换一个存根程序（新结合进来的模块往往又需要新的存根程序);<br>\r\n③在结合进一个模块的同时进行测试;<br>\r\n④为了保证加入模块没有引进新的错误，可能需要进行<strong>回归测试</strong>（即全部或部分地重复以前做过的测试)。<br>\r\n从②开始不断地重复进行上述过程，直到构造起完整的软件结构为止。</p>\r\n<p class=\"has-line-data\" data-line-start=\"596\" data-line-end=\"597\"><strong>自顶向下</strong>的结合方法能够在早期主要的控制或者关键的抉择进行检验，**下一个分解的好的软件结构中，关键的抉择唯一层次系统的较上层</p>\r\n<p class=\"has-line-data\" data-line-start=\"598\" data-line-end=\"599\">如果选择<strong>深度优先</strong>的结合方法，可以在早期实现软件的完整功能并验证功能</p>\r\n<p class=\"has-line-data\" data-line-start=\"600\" data-line-end=\"603\"><strong>自底向上测试</strong><br>\r\n自底向上测试从“原子”模块（即在软件结构最低层的模块)开始组装和测试。因为是从底部向上结合模块，总能得到所需的下层模块处理功能，所以不需要存根程序。<br>\r\n用下述步骤可以实现自底向上的结合策略。</p>\r\n<blockquote></blockquote>\r\n<p class=\"has-line-data\" data-line-start=\"604\" data-line-end=\"609\">①把低层模块组合成实现某个特定的软件子功能的族;<br>\r\n②写一个驱动程序（用于测试的控制程序），协调测试数据的输入和输出；<br>\r\n③对由模块组成的子功能族进行测试;<br>\r\n④去掉驱动程序，沿软件结构自下向上移动，把子功能族组合起来形成更大的子功能族。<br>\r\n上述第②~④步实质上构成了一个循环。</p>\r\n<p class=\"has-line-data\" data-line-start=\"610\" data-line-end=\"614\"><strong>自顶向下和自底向上的对比</strong><br>\r\n<strong>自顶向下测试方法</strong>的<strong>主要优点</strong>是不需要测试驱动程序，能够在测试阶段的早期实现并验证系统的主要功能，而且能在早期发现上层模块的接口错误。<br>\r\n<strong>自顶向下测试方法</strong>的<strong>主要缺点</strong>是需要存根程序，可能遇到与此相联系的测试困难，低层关键模块中的错误发现较晚，而且用这种方法在早期不能充分展开人力。<br>\r\n<strong>自底向上测试方法的优缺点与上述自顶向下测试方法的优缺点刚好相反</strong></p>\r\n<p class=\"has-line-data\" data-line-start=\"615\" data-line-end=\"617\"><strong>回归测试</strong><br>\r\n<strong>回归测试</strong>是指重新执行已经做过的测试的某个子集，以保证上述这些变化没有带来非预期的副作用。</p>\r\n<p class=\"has-line-data\" data-line-start=\"618\" data-line-end=\"619\"><strong>回归测试</strong>就是用于保证由于调试或其他原因引起的变化，不会导致非预期的软件行为或额外错误的测试活动。</p>\r\n<p class=\"has-line-data\" data-line-start=\"620\" data-line-end=\"621\">回归测试集（已执行过的测试用例的子集）包括下述3类不同的测试用例。</p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"622\" data-line-end=\"623\">检测软件全部功能的代表性测试用例.</li>\r\n<li class=\"has-line-data\" data-line-start=\"623\" data-line-end=\"624\">专门针对可能受修改影响的软件功能的附加测试。</li>\r\n<li class=\"has-line-data\" data-line-start=\"624\" data-line-end=\"626\">针对被修改过的软件成分的测试。</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"626\" data-line-end=\"627\">在集成测试过程中，回归测试用例的数量可能变得非常大，因此，<strong>应该把回归测试集设计成只包括可以检测程序每个主要功能中的一类或多类错误的那样一些测试用例</strong>。</p>', '软件工程', '2020-12-30 17:39:09', 0);
INSERT INTO `article` VALUES (23, 13, '邓晓枫', '软件工程7', '<p class=\"has-line-data\" data-line-start=\"646\" data-line-end=\"650\">###白盒测试<br>\r\n<strong>通常把测试数据和预期的输出结果称为测试用例。</strong><br>\r\n选取数据时尽量选择<strong>少量高效的</strong>测试用例<br>\r\n设计测试方案的基本目标是，确定一组最可能发现某个错误或某类错误的测试数据。</p>\r\n<p class=\"has-line-data\" data-line-start=\"651\" data-line-end=\"656\"><strong>逻辑覆盖</strong><br>\r\n<strong>逻辑覆盖</strong>是对一系列测试过程的总称，这组测试过程逐渐进行越来越完整的通路测试。<br>\r\n<strong>1. 语句覆盖</strong><br>\r\n<strong>语句覆盖</strong>的含义是，选择足够多的测试数据，使被测程序中每个语句至少执行一次。<br>\r\n即只需要能走完所有的路径即可，保证每个语句能正常执行，如果<strong>存在判定过广</strong>，例如AND改为OR的情况其不能查出错误，因此这是<strong>很弱的逻辑覆盖标准</strong></p>\r\n<p class=\"has-line-data\" data-line-start=\"657\" data-line-end=\"660\"><strong>2.  判定覆盖</strong><br>\r\n又叫分支覆盖，要求其能满足每个语句至少走一次，并且每个判定的可能性都需要覆盖到至少一次，即判定执行过一次就行，不用看前面执行的判定。<br>\r\n但是其仍然只覆盖了全部路径的一半</p>\r\n<p class=\"has-line-data\" data-line-start=\"661\" data-line-end=\"664\"><strong>3. 条件覆盖</strong><br>\r\n<strong>每个语句至少走一次，每个条件取值都能取到各种可能的结果,即每个判定条件中的可能取值都取一次</strong><br>\r\n其中满足条件覆盖的不一定能满足判定覆盖，-</p>\r\n<p class=\"has-line-data\" data-line-start=\"665\" data-line-end=\"667\"><strong>4. 判定/条件覆盖</strong><br>\r\n选取足够多的测试数据，使得判定表达式中的每个条件都取到各种可能的值，而且每个判定表达式也都取到各种可能的结果。  <strong>有时判定/条件覆盖也并不比条件覆盖更强。</strong></p>\r\n<p class=\"has-line-data\" data-line-start=\"668\" data-line-end=\"671\"><strong>5. 条件组合覆盖</strong><br>\r\n选取足够多的数据，是每个判定表达式中的条件的各种可能组合都出现一次<br>\r\n<strong>满足该覆盖的必然满足前四个覆盖，因此其是这几种中最强的</strong></p>\r\n<p class=\"has-line-data\" data-line-start=\"672\" data-line-end=\"673\">基本路径测试</p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"674\" data-line-end=\"675\">1.根据过程设计结果画出相应的流图</li>\r\n<li class=\"has-line-data\" data-line-start=\"675\" data-line-end=\"676\">2.计算流图的环形复杂度</li>\r\n<li class=\"has-line-data\" data-line-start=\"676\" data-line-end=\"678\">3.确定线性独立路径的基本集合</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"678\" data-line-end=\"682\">条件测试<br>\r\nBRO条件测试<br>\r\n适用情况：在条件中所有布尔变量和关系运算符都只出现一次而且没有公共变量。<br>\r\n目的：确保能发现复合条件的分支错和关系运算符中的关系算符错</p>\r\n<p class=\"has-line-data\" data-line-start=\"683\" data-line-end=\"685\">循环测试<br>\r\n3种循环：简单循环、嵌套循环和串接循环</p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"686\" data-line-end=\"687\">简单循环：逐渐提高循环次数</li>\r\n<li class=\"has-line-data\" data-line-start=\"687\" data-line-end=\"688\">嵌套循环：从最内层循环开始用简单测试，其他循环都设置为最小值，为边缘值增加额外测试，由内向外，但保持其他循环为“典型值”</li>\r\n<li class=\"has-line-data\" data-line-start=\"688\" data-line-end=\"690\">串接循环：其循环独立则是用简单循环，否则用嵌套循环</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"690\" data-line-end=\"692\">###黑盒测试技术<br>\r\n<strong>等价划分</strong>把程序的输入域划分为若干个数据类，力图设计出能发现若干个程序错误</p>\r\n<h2 class=\"code-line\" data-line-start=698 data-line-end=699 ><a id=\"_698\"></a>调试</h2>\r\n<p class=\"has-line-data\" data-line-start=\"699\" data-line-end=\"701\">调试是排除错误的过程<br>\r\n把症状和原因联系起来</p>\r\n<p class=\"has-line-data\" data-line-start=\"702\" data-line-end=\"703\"><strong>某些软件的错误特征</strong></p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"704\" data-line-end=\"705\">症状和原因在程序中相距甚远;</li>\r\n<li class=\"has-line-data\" data-line-start=\"705\" data-line-end=\"706\">症状实际上并不是由错误（例如：舍入误差）。</li>\r\n<li class=\"has-line-data\" data-line-start=\"706\" data-line-end=\"707\">由定时问题引起。</li>\r\n<li class=\"has-line-data\" data-line-start=\"707\" data-line-end=\"708\">症状可能时有时无：在硬件和软件紧密地耦合在一起的嵌入式系统中常见。</li>\r\n<li class=\"has-line-data\" data-line-start=\"708\" data-line-end=\"710\">症状可能分布在不同的处理机上（分布式系统）。</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"710\" data-line-end=\"711\">###调试途径</p>\r\n<ol>\r\n<li class=\"has-line-data\" data-line-start=\"711\" data-line-end=\"714\">\r\n<p class=\"has-line-data\" data-line-start=\"711\" data-line-end=\"713\"><strong>蛮干法</strong><br>\r\n全部地方都直接输出查看</p>\r\n</li>\r\n<li class=\"has-line-data\" data-line-start=\"714\" data-line-end=\"719\">\r\n<p class=\"has-line-data\" data-line-start=\"714\" data-line-end=\"718\"><strong>回溯法</strong><br>\r\n<strong>对于小程序更有效</strong><br>\r\n从发现错误的地方出发，控制流往回追溯直到找到错误<br>\r\n<strong>程序大的时候路径太多不适用</strong></p>\r\n</li>\r\n<li class=\"has-line-data\" data-line-start=\"719\" data-line-end=\"722\">\r\n<p class=\"has-line-data\" data-line-start=\"719\" data-line-end=\"721\"><strong>原因排错法</strong><br>\r\n对分查找法，归纳法，演绎法</p>\r\n</li>\r\n</ol>\r\n<h2 class=\"code-line\" data-line-start=722 data-line-end=723 ><a id=\"_722\"></a>软件可靠性</h2>\r\n<p class=\"has-line-data\" data-line-start=\"723\" data-line-end=\"726\">软件可靠性是程序在给定的时间间隔内，（按照规格说明书的规定）成功地运行的概率。<br>\r\n软件可靠性随着给定的时间间隔的加大而减少。<br>\r\n软件可用性是程序在给定的时间点，规定）成功地运行的概率。</p>\r\n<p class=\"has-line-data\" data-line-start=\"727\" data-line-end=\"732\">MTTR： 平均维修时间，修复一个故障平均需要的时间<br>\r\nMTTF：平均无故障时间，系统按规格说明书规定成功地运行<br>\r\n的平均时间，主要取决于系统中潜伏的错误数目。<br>\r\n稳态可用性：<br>\r\nAss＝MTTR/（MTTR＋MTTF）</p>\r\n<p class=\"has-line-data\" data-line-start=\"733\" data-line-end=\"734\"><strong>估计错误总数的方法</strong></p>\r\n<ol>\r\n<li class=\"has-line-data\" data-line-start=\"734\" data-line-end=\"737\">\r\n<p class=\"has-line-data\" data-line-start=\"734\" data-line-end=\"736\">植入错误法<br>\r\n植入100个错误，测试发现200个错误，同时有10个植入的错误，可以估计到100/10＝X/200 即估计为2000个错误</p>\r\n</li>\r\n<li class=\"has-line-data\" data-line-start=\"737\" data-line-end=\"740\">\r\n<p class=\"has-line-data\" data-line-start=\"737\" data-line-end=\"739\">分别测试法<br>\r\nA测试发现50个，B测试发现了80个，相同发现的有20个，那么可以估计50/20=X/80,那么总数即为X＝200</p>\r\n</li>\r\n</ol>\r\n<h2 class=\"code-line\" data-line-start=740 data-line-end=741 ><a id=\"_740\"></a>维护</h2>\r\n<h3 class=\"code-line\" data-line-start=741 data-line-end=742 ><a id=\"_741\"></a>软件维护的定义</h3>\r\n<p class=\"has-line-data\" data-line-start=\"742\" data-line-end=\"743\">可以分为四种</p>\r\n<ol>\r\n<li class=\"has-line-data\" data-line-start=\"743\" data-line-end=\"744\">改正性维护（纠错）</li>\r\n<li class=\"has-line-data\" data-line-start=\"744\" data-line-end=\"745\">适应性维护（适配）</li>\r\n<li class=\"has-line-data\" data-line-start=\"745\" data-line-end=\"746\">完善性维护（更新）</li>\r\n<li class=\"has-line-data\" data-line-start=\"746\" data-line-end=\"748\">预防性维护：改进可靠性和可维护性</li>\r\n</ol>\r\n<h3 class=\"code-line\" data-line-start=748 data-line-end=749 ><a id=\"_748\"></a>软件维护的特点</h3>\r\n<p class=\"has-line-data\" data-line-start=\"749\" data-line-end=\"750\"><strong>非结构化维护</strong></p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"751\" data-line-end=\"752\">只有代码</li>\r\n<li class=\"has-line-data\" data-line-start=\"752\" data-line-end=\"753\">常常由于程序内部文档不足而使评价更困难</li>\r\n<li class=\"has-line-data\" data-line-start=\"753\" data-line-end=\"754\">对于软件结构、全程数据结构、系统接口、性能和（或）设计约束等经常会产生误解</li>\r\n<li class=\"has-line-data\" data-line-start=\"754\" data-line-end=\"757\">对程序改动的后果难于估量<br>\r\n非结构化维护需要付出很大代价（浪费精力并且遭受挫折和打击),是没有使用良好定义的方法学开发出来的软件的必然结果.</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"757\" data-line-end=\"759\"><strong>结构化维护</strong><br>\r\n如果有一个完整的软件配置存在，那么维护工作从评价设计文档开始,确定软件重要的结构、性能以及接口等特点；估量要求的改动将带来的影响，并且计划实施途径。</p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"760\" data-line-end=\"761\">首先，修改设计并且对所做的修改进行仔细复查。</li>\r\n<li class=\"has-line-data\" data-line-start=\"761\" data-line-end=\"762\">然后，编写相应的源程序代码;</li>\r\n<li class=\"has-line-data\" data-line-start=\"762\" data-line-end=\"763\">接下来，使用在测试说明书中包含的信息进行回归测试;</li>\r\n<li class=\"has-line-data\" data-line-start=\"763\" data-line-end=\"765\">最后，把修改后的软件再次交付使用。</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"765\" data-line-end=\"774\"><strong>维护的代价</strong><br>\r\n有型代价：<br>\r\n表面维护经费<br>\r\n无形代价：<br>\r\n占用资源<br>\r\n修改不及时引起不满<br>\r\n修一个多三个bug<br>\r\n最后一个代价<br>\r\n生产力不如之前，但是仍然要维护</p>', '软件工程', '2021-12-30 17:40:04', 0);
INSERT INTO `article` VALUES (24, 13, '邓晓枫', '软件工程8', '<p class=\"has-line-data\" data-line-start=\"775\" data-line-end=\"783\"><strong>维护工作量模型</strong>：<br>\r\nM＝P＋K＊e^（c－d）<br>\r\nM：维护用的总工作量<br>\r\nP：生产性工作量<br>\r\nK：经验常数<br>\r\nC：复杂程度<br>\r\nd：维护人员对软件的熟悉程度<br>\r\n<strong>模型表明</strong>：如果软件的开发途径不好，原开发人员不能参加维护工作，那么维护工作量和费用将指数地增加。</p>\r\n<p class=\"has-line-data\" data-line-start=\"784\" data-line-end=\"785\">维护问题所在：</p>\r\n<ol>\r\n<li class=\"has-line-data\" data-line-start=\"785\" data-line-end=\"786\">难以理解别人的代码</li>\r\n<li class=\"has-line-data\" data-line-start=\"786\" data-line-end=\"787\">没有文档或者没有合格的文档</li>\r\n<li class=\"has-line-data\" data-line-start=\"787\" data-line-end=\"788\">开发人员不可能详细说代码</li>\r\n<li class=\"has-line-data\" data-line-start=\"788\" data-line-end=\"789\">设计时不一定考虑了修改</li>\r\n<li class=\"has-line-data\" data-line-start=\"789\" data-line-end=\"791\">无聊，没钱</li>\r\n</ol>\r\n<p class=\"has-line-data\" data-line-start=\"791\" data-line-end=\"796\">###维护的过程<br>\r\n<strong>维护的本质</strong><br>\r\n维护是：<strong>修改和压缩了软件的定义和开发过程</strong><br>\r\n维护要有组织，要有<strong>报告和评价的过程</strong>，要有维护的标准化事件流<br>\r\n此外还要有适用于<strong>维护活动记录的保管</strong>过程，并且规定复审标准</p>\r\n<p class=\"has-line-data\" data-line-start=\"797\" data-line-end=\"799\"><strong>维护组织</strong><br>\r\n维护开始前<strong>明确责任</strong>以减少混乱</p>\r\n<p class=\"has-line-data\" data-line-start=\"800\" data-line-end=\"804\"><strong>维护报告</strong><br>\r\n用<strong>标准化格式</strong><br>\r\n通过给用户的<strong>维护要求表</strong>根据要求表维护<br>\r\n适应性或者完善醒的维护要求：<strong>提出需求说明书</strong></p>\r\n<p class=\"has-line-data\" data-line-start=\"805\" data-line-end=\"806\"><strong>维护必做</strong></p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"807\" data-line-end=\"808\">修改软件设计</li>\r\n<li class=\"has-line-data\" data-line-start=\"808\" data-line-end=\"809\">复查</li>\r\n<li class=\"has-line-data\" data-line-start=\"809\" data-line-end=\"810\">必要的代码修改</li>\r\n<li class=\"has-line-data\" data-line-start=\"810\" data-line-end=\"811\">单元测试和集成测试</li>\r\n<li class=\"has-line-data\" data-line-start=\"811\" data-line-end=\"813\">验收和复审</li>\r\n</ul>\r\n<h3 class=\"code-line\" data-line-start=813 data-line-end=814 ><a id=\"_813\"></a>软件的可维护性</h3>\r\n<p class=\"has-line-data\" data-line-start=\"814\" data-line-end=\"815\">即维护人员理解改进改动程序的难度</p>\r\n<p class=\"has-line-data\" data-line-start=\"816\" data-line-end=\"817\"><strong>决定软件可维护性的因素</strong></p>\r\n<ol>\r\n<li class=\"has-line-data\" data-line-start=\"817\" data-line-end=\"820\">\r\n<p class=\"has-line-data\" data-line-start=\"817\" data-line-end=\"819\">可理解性<br>\r\n理解软件结构，功能，内容，接口和处理过程的难易程度</p>\r\n</li>\r\n<li class=\"has-line-data\" data-line-start=\"820\" data-line-end=\"824\">\r\n<p class=\"has-line-data\" data-line-start=\"820\" data-line-end=\"823\">可测试性<br>\r\n诊断和测试的难易程度，决定因素有<br>\r\n文档，软件结构，工具，测试过程，测试方案</p>\r\n</li>\r\n<li class=\"has-line-data\" data-line-start=\"824\" data-line-end=\"827\">\r\n<p class=\"has-line-data\" data-line-start=\"824\" data-line-end=\"826\">可修改性<br>\r\n软件修改的难易程度</p>\r\n</li>\r\n<li class=\"has-line-data\" data-line-start=\"827\" data-line-end=\"830\">\r\n<p class=\"has-line-data\" data-line-start=\"827\" data-line-end=\"829\">可移植性<br>\r\n把一种计算环境一直到另一个计算环境的难易程度</p>\r\n</li>\r\n<li class=\"has-line-data\" data-line-start=\"830\" data-line-end=\"834\">\r\n<p class=\"has-line-data\" data-line-start=\"830\" data-line-end=\"833\">可重用性<br>\r\n指在不同环境中重复使用的效能，改模块再重用过程中都会发现和消除一些错误，随着时间推移成为实质性上无错误的<br>\r\n高可靠的模块越多，软件的可靠性越高，改正行维护需求越少</p>\r\n</li>\r\n</ol>\r\n<h3 class=\"code-line\" data-line-start=834 data-line-end=835 ><a id=\"_834\"></a>软件再工程过程</h3>\r\n<p class=\"has-line-data\" data-line-start=\"835\" data-line-end=\"836\"><strong>库存目录分析</strong></p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"837\" data-line-end=\"838\">保存系统的库存目录，该目录包含应用系统的基本信息</li>\r\n<li class=\"has-line-data\" data-line-start=\"838\" data-line-end=\"839\">分析库存目录的业务重要程度，寿命，可维护性，语气修改次数</li>\r\n<li class=\"has-line-data\" data-line-start=\"839\" data-line-end=\"841\">选出牛马准备重构</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"841\" data-line-end=\"843\"><strong>文档重构</strong><br>\r\n具体情况不同，处理这个问题的方法也不同。</p>\r\n<blockquote></blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"844\" data-line-end=\"845\">如果程序正在走向其生命的终点，那么保持现状;</li>\r\n<li class=\"has-line-data\" data-line-start=\"845\" data-line-end=\"846\">如果必须更新文档，采用“使用时建文档”的方式;</li>\r\n<li class=\"has-line-data\" data-line-start=\"846\" data-line-end=\"848\">如果该系统是完成业务工作的关键，必须重构全部文档但仍应把文档工作减少到必需的最小量。</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"848\" data-line-end=\"852\"><strong>随后逆向工程</strong><br>\r\n<strong>代码重构</strong><br>\r\n<strong>数据重构</strong><br>\r\n<strong>正向重构</strong></p>\r\n<h3 class=\"code-line\" data-line-start=853 data-line-end=854 ><a id=\"_853\"></a>面向对象设计流程</h3>\r\n<ol>\r\n<li class=\"has-line-data\" data-line-start=\"854\" data-line-end=\"855\">寻找类和对象</li>\r\n<li class=\"has-line-data\" data-line-start=\"855\" data-line-end=\"856\">划分主题</li>\r\n<li class=\"has-line-data\" data-line-start=\"856\" data-line-end=\"857\">寻找属性</li>\r\n<li class=\"has-line-data\" data-line-start=\"857\" data-line-end=\"859\">识别动态和静态</li>\r\n</ol>\r\n<p class=\"has-line-data\" data-line-start=\"859\" data-line-end=\"863\">###10.3建立对象模型<br>\r\n####10.3.1确定类与对象<br>\r\n1.找出候选的类与对象<br>\r\n2.筛选出正确的类与对象</p>\r\n<blockquote>\r\n<p class=\"has-line-data\" data-line-start=\"863\" data-line-end=\"864\">筛选时主要根据下列标准，删除不正确/不必要的类与对象</p>\r\n</blockquote>\r\n<ul>\r\n<li class=\"has-line-data\" data-line-start=\"864\" data-line-end=\"865\">(1)冗余</li>\r\n<li class=\"has-line-data\" data-line-start=\"865\" data-line-end=\"866\">(2)无关</li>\r\n<li class=\"has-line-data\" data-line-start=\"866\" data-line-end=\"867\">(3)笼统</li>\r\n<li class=\"has-line-data\" data-line-start=\"867\" data-line-end=\"868\">(4)属性</li>\r\n<li class=\"has-line-data\" data-line-start=\"868\" data-line-end=\"869\">(5)操作</li>\r\n<li class=\"has-line-data\" data-line-start=\"869\" data-line-end=\"871\">(6)实现</li>\r\n</ul>\r\n<p class=\"has-line-data\" data-line-start=\"871\" data-line-end=\"885\">####10.3.2确定关联<br>\r\n1.初步确定关联<br>\r\n2.筛选<br>\r\n（1） 已删去的类之间的关联<br>\r\n（2）与问题无关的或应在实现阶段考虑的关联<br>\r\n（3）瞬时事件<br>\r\n（4）三元关联<br>\r\n（5）派生关联<br>\r\n3.进一步完善<br>\r\n（1）正名<br>\r\n（2）分解<br>\r\n（3）补充<br>\r\n（4）标明重数<br>\r\n（5）</p>', '软件工程', '2023-12-30 17:40:25', 0);

-- ----------------------------
-- Table structure for comments
-- ----------------------------
DROP TABLE IF EXISTS `comments`;
CREATE TABLE `comments`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `article_id` int(0) NOT NULL,
  `user_uuid` int(0) NOT NULL,
  `content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `time` datetime(0) NULL DEFAULT CURRENT_TIMESTAMP(0),
  `likes` int(0) NULL DEFAULT 0,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `article_id`(`article_id`) USING BTREE,
  INDEX `comments_ibfk_2`(`user_uuid`) USING BTREE,
  CONSTRAINT `comments_ibfk_1` FOREIGN KEY (`article_id`) REFERENCES `article` (`AID`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `comments_ibfk_2` FOREIGN KEY (`user_uuid`) REFERENCES `user` (`UUID`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of comments
-- ----------------------------
INSERT INTO `comments` VALUES (2, 1, 12, '123', '2024-12-29 20:21:30', 0);
INSERT INTO `comments` VALUES (3, 2, 12, '123', '2024-12-29 20:27:27', 0);
INSERT INTO `comments` VALUES (4, 2, 3, '312', '2024-12-29 21:36:01', 0);
INSERT INTO `comments` VALUES (5, 2, 5, '123', '2024-12-29 22:14:06', 0);
INSERT INTO `comments` VALUES (6, 2, 5, '123', '2024-12-29 22:15:03', 0);
INSERT INTO `comments` VALUES (7, 2, 5, '123', '2024-12-29 22:16:43', 0);
INSERT INTO `comments` VALUES (8, 1, 13, '123', '2024-12-30 17:29:42', 0);

-- ----------------------------
-- Table structure for favorite
-- ----------------------------
DROP TABLE IF EXISTS `favorite`;
CREATE TABLE `favorite`  (
  `AID` int(0) NOT NULL,
  `UUID` int(0) NOT NULL,
  PRIMARY KEY (`AID`, `UUID`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of favorite
-- ----------------------------
INSERT INTO `favorite` VALUES (2, 2);

-- ----------------------------
-- Table structure for message
-- ----------------------------
DROP TABLE IF EXISTS `message`;
CREATE TABLE `message`  (
  `id` bigint(0) NOT NULL AUTO_INCREMENT,
  `type` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `article_id` bigint(0) NULL DEFAULT NULL,
  `comment_id` bigint(0) NULL DEFAULT NULL,
  `reply_id` bigint(0) NULL DEFAULT NULL,
  `user_id` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `user_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `user_avatar` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL,
  `likes` int(0) NULL DEFAULT NULL,
  `time` timestamp(0) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of message
-- ----------------------------

-- ----------------------------
-- Table structure for replies
-- ----------------------------
DROP TABLE IF EXISTS `replies`;
CREATE TABLE `replies`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `comment_id` int(0) NOT NULL,
  `user_uuid` int(0) NOT NULL,
  `content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `time` datetime(0) NULL DEFAULT CURRENT_TIMESTAMP(0),
  `likes` int(0) NULL DEFAULT 0,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `comment_id`(`comment_id`) USING BTREE,
  INDEX `user_uuid`(`user_uuid`) USING BTREE,
  CONSTRAINT `replies_ibfk_1` FOREIGN KEY (`comment_id`) REFERENCES `comments` (`id`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `replies_ibfk_2` FOREIGN KEY (`user_uuid`) REFERENCES `user` (`UUID`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of replies
-- ----------------------------
INSERT INTO `replies` VALUES (1, 3, 3, '123', '2024-12-29 21:30:37', 0);
INSERT INTO `replies` VALUES (2, 3, 3, '321', '2024-12-29 21:30:49', 0);
INSERT INTO `replies` VALUES (3, 3, 3, '321', '2024-12-29 21:30:53', 0);
INSERT INTO `replies` VALUES (4, 4, 3, '123', '2024-12-29 21:45:41', 0);
INSERT INTO `replies` VALUES (5, 4, 5, '123', '2024-12-29 22:13:59', 0);
INSERT INTO `replies` VALUES (6, 2, 13, '123', '2024-12-30 17:29:46', 0);

-- ----------------------------
-- Table structure for spring_session
-- ----------------------------
DROP TABLE IF EXISTS `spring_session`;
CREATE TABLE `spring_session`  (
  `PRIMARY_ID` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `SESSION_ID` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `CREATION_TIME` bigint(0) NOT NULL,
  `LAST_ACCESS_TIME` bigint(0) NOT NULL,
  `MAX_INACTIVE_INTERVAL` int(0) NOT NULL,
  `EXPIRY_TIME` bigint(0) NOT NULL,
  `PRINCIPAL_NAME` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  PRIMARY KEY (`PRIMARY_ID`) USING BTREE,
  UNIQUE INDEX `SPRING_SESSION_IX1`(`SESSION_ID`) USING BTREE,
  INDEX `SPRING_SESSION_IX2`(`EXPIRY_TIME`) USING BTREE,
  INDEX `SPRING_SESSION_IX3`(`PRINCIPAL_NAME`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of spring_session
-- ----------------------------

-- ----------------------------
-- Table structure for spring_session_attributes
-- ----------------------------
DROP TABLE IF EXISTS `spring_session_attributes`;
CREATE TABLE `spring_session_attributes`  (
  `SESSION_PRIMARY_ID` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `ATTRIBUTE_NAME` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `ATTRIBUTE_BYTES` blob NOT NULL,
  PRIMARY KEY (`SESSION_PRIMARY_ID`, `ATTRIBUTE_NAME`) USING BTREE,
  CONSTRAINT `SPRING_SESSION_ATTRIBUTES_FK` FOREIGN KEY (`SESSION_PRIMARY_ID`) REFERENCES `spring_session` (`PRIMARY_ID`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of spring_session_attributes
-- ----------------------------

-- ----------------------------
-- Table structure for user
-- ----------------------------
DROP TABLE IF EXISTS `user`;
CREATE TABLE `user`  (
  `UUID` int(0) NOT NULL AUTO_INCREMENT,
  `password` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT '123456',
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `role` int(0) NULL DEFAULT NULL,
  `email` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `phone` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `address` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `register` datetime(0) NULL DEFAULT NULL,
  `avatar` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT '/img/defaut.png',
  PRIMARY KEY (`UUID`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 13 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of user
-- ----------------------------
INSERT INTO `user` VALUES (1, '123456', 'admin', 1, '3400084960@qq.com', '15766034874', '广东省', '2024-12-27 16:00:00', '/img/defaut.jpg');
INSERT INTO `user` VALUES (2, '111111', '阿巴阿巴12', 1, '131', '123', '123', '2024-12-26 10:30:00', '/img/defaut.jpg');
INSERT INTO `user` VALUES (3, '123456', '王五', 0, 'wangwu@example.com', '13765432109', '广州市天河区', '2024-12-25 09:45:00', '/img/defaut.jpg');
INSERT INTO `user` VALUES (4, '123456', '赵六', 0, 'zhaoliu@example.com', '13698765432', '深圳市南山区', '2024-12-24 14:15:00', '/img/defaut.jpg');
INSERT INTO `user` VALUES (5, '123456', '周七', 0, 'zhouqi@example.com', '13512345678', '重庆市渝中区', '2024-12-23 17:00:00', '/img/defaut.jpg');
INSERT INTO `user` VALUES (7, '123456', '张三', 0, '3400084960@qq.com', '12345678911', '广州市', '2024-12-28 13:15:05', '/img/defaut.jpg');
INSERT INTO `user` VALUES (12, '1111', '很好的', 0, '1111', NULL, NULL, '2024-12-29 02:16:27', '/img/defaut.jpg');
INSERT INTO `user` VALUES (13, '123456', '邓晓枫', 0, 'dengxiaofeng@qq.com', NULL, NULL, '2024-12-30 17:24:18', '/img/defaut.jpg');

SET FOREIGN_KEY_CHECKS = 1;
